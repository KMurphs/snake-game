{"version":3,"sources":["custom-form-controls/input-with-moving-label.tsx","custom-hooks/useClickAnimation.ts","custom-misc-controls/modal.tsx","store/type.ts","game/utils.ts","login/logo.tsx","login/index.tsx","custom-misc-controls/hamburger-menu-control.tsx","game/assets/snake-game-logo-sm.gif","game/board.tsx","game/keypad.tsx","game/index.tsx","custom-hooks/generalHelpers.ts","custom-hooks/scrollHelpers.ts","App.tsx","custom-hooks/useCustomCss_vh.ts","custom-utils/local-storage.ts","reportWebVitals.ts","store/index.tsx","index.tsx"],"names":["InputWithMovingLabel","value","setValue","label","type","fontawesomeClass","extraClasses","className","id","required","onChange","evt","target","htmlFor","defaultProps","useWithType","ReactComponent","explicitType","props","TextInput","useClickAnimation","animationClass","animationPeriod","callback","onAnimatedClick","ev","data","currentTarget","classList","contains","add","setTimeout","remove","Modal","children","show","onClose","containerExtraClasses","onClick","aria-hidden","Direction","translate","p","direction","UP","x","y","DOWN","LEFT","getInitialSnake","rows","cols","center","Math","floor","body","Array","fill","reduce","acc","length","RIGHT","useBoardDimension","cb","useLayoutEffect","clientWidth","clientHeight","markSnake","snake","cssClass","addClass","forEach","item","itemNode","querySelector","secsToString","secs","round","n","size","s","join","parseInt","substr","intToPaddedString","getRandomPoint","random","doesPointBelongToSnake","snakeBody","curr","arePointsEqual","p1","p2","getProgressionUntil","delta","start","end","getMargin","items","max","increment","low","high","LogoBoard","useState","gridData","setGridData","grid_cols","grid_rows","grid","map","index","row","col","boardRef","useRef","getBoardDimension","useCallback","width","height","current","logoBody","xWidth","yHeight","filter","topMargin","row_top","row_center","row_bottom","col_left","col_right","first","last","logo","Set","reverse","from","getLogo","useEffect","currPos","snakeLength","interval","setInterval","processed","style","opacity","clearInterval","ref","isUsernameValid","undefined","Login","onLogin","getUserByName","addUser","showModal","setShowModal","username","setUsername","showValidatedForm","setShowValidatedForm","val","user","handleOnLogin","UnknownUser","name","onResponse","res","doRegisterUser","handleUnkownUserResponse","Hamburger","state","checked","e","Board","grabNextDirection","isPaused","hasLost","hasWon","notifyGameFailure","notifyScorePoint","onTimerTick","snakeCSSClass","crumbCSSClass","gameControls","crumb","getManagementControls","getNextDirection","getPausedState","getLostState","getWonState","notifyCrumbAssimilation","getLevelSpeed","level","managementControls","getNewCrumb","crumbNode","nextDirection","dir1","dir2","horizontalDirs","verticalDirs","includes","hasDirectionChanged","oldSnake","newHead","hasAssimilatedCrumb","newBody","slice","tail","getNewSnake","newSnake","headNode","isInvalidHead","tailNode","Keypad","onKeyPress","animatedClick","Game","onChangePauseState","onResetGame","onNextDirection","DetailsFC","gameTimeScore","onResultFeedback","isPaneOpen","setIsPaneOpen","uiRef","handleKeyPress","key","onResultFeedbackWrapper","focus","modalClass","tabIndex","onKeyDown","src","alt","pointScore","Results","timeScore","useAppURI","baseAppURI","uri","useMemo","baseCurrURI","window","location","pathname","split","replaceAll","getBestSession","session1","session2","App","isLoggedIn","version","nextSnakeDirection","onUserLogin","onLogout","getNewUser","onLostGame","onScorePoint","console","log","htmlTarget","document","adjuster","setProperty","innerHeight","addEventListener","removeEventListener","useCustomCss_vh","onCondition","handleResetURI","history","pushState","useResetToBaseURIOnLoad","exec","origin","users","setUsers","dataStr","JSON","stringify","localStorage","setItem","toLocalStorage","storageUsers","defaultValue","localString","getItem","parseFloat","obj","parse","err","fromLocalStorage","find","u","toLowerCase","getBestUser","sort","a","b","best","session","DetailsWithProps","Details","currentUser","bestUser","basename","path","to","newUsername","newUser","render","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cloneUser","userTemplate","pointScoreInc","timeScoreInc","levelInc","mapStateToProps","chronometerCurrent","mapDispatchToProps","dispatch","payload","dir","capitalizeFirstLetter","word","toUpperCase","getNewSession","Date","getTime","getNewReduxUser","getInitialState","maximumScore","chronometerStart","levelScore","store","createStore","mainReducer","action","user1","rest1","newUser1","newState1","newState2","user3","rest3","newUser3","user4","rest4","newUser4","user5","rest5","newUser5","AppWithReduxStore","ConnectedComponent","connect","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aff68c5a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './input-with-moving-label.css';\r\n\r\nexport type Props = {\r\n  value: number | string,\r\n  setValue: (newValue: number | string) => void,\r\n  label: string,\r\n  extraClasses?: string,\r\n  fontawesomeClass?: string,\r\n}\r\ntype PropsInternal = Props & {\r\n  type: string\r\n}\r\n\r\nconst InputWithMovingLabel: React.FC<PropsInternal> = ({value, setValue, label, type, fontawesomeClass, extraClasses}: PropsInternal) => {\r\n\r\n  return (\r\n    <div className={`input-with-moving-label ${extraClasses}`} >\r\n      <input id=\"input-1\" \r\n             type={type} \r\n             required \r\n             value={value} \r\n             onChange={evt => setValue((evt.target as HTMLInputElement).value)}\r\n            //  onChange={evt => setValue(parseInt((evt.target as HTMLInputElement).value))}\r\n      />\r\n\r\n      <i className={`${fontawesomeClass} input-with-moving-label__icon`}></i>\r\n      \r\n      <label htmlFor=\"input-1\" className=\"moving-label\">\r\n        {label}\r\n      </label>\r\n    </div>\r\n  )\r\n  \r\n}\r\nInputWithMovingLabel.defaultProps = {\r\n  fontawesomeClass: \"hidden\",\r\n  extraClasses: \"\"\r\n}\r\nconst TextAreaWithMovingLabel: React.FC<Props> = ({value, setValue, label}: Props) => {\r\n\r\n  return (\r\n    <div className=\"input-with-moving-label\" >\r\n      <textarea name=\"textarea-1\"\r\n                id=\"textarea-1\" \r\n                required \r\n                value={value} \r\n                onChange={evt => setValue((evt.target as HTMLTextAreaElement).value)}>\r\n       </textarea>\r\n\r\n      <label htmlFor=\"textarea-1\" className=\"moving-label\">{label}</label>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\n\r\nconst useWithType = (ReactComponent: React.FC<PropsInternal>, explicitType: string): React.FC<Props> => {\r\n  return (props: Props) => <ReactComponent type={explicitType} {...props}/>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport { TextAreaWithMovingLabel as TextArea};\r\nexport const TextInput: React.FC<Props> = (props: Props) => useWithType(InputWithMovingLabel, \"text\")(props)\r\nexport const NumericInput: React.FC<Props> = (props: Props) => useWithType(InputWithMovingLabel, \"number\")(props)\r\n","\r\n\r\nexport default function useClickAnimation(\r\n\r\n    animationClass: string = \"animating\", \r\n    animationPeriod: number = 300, \r\n    callback?: (data?: any)=>void\r\n  \r\n  ){\r\n\r\n  const onAnimatedClick = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>, data?: any)=>{\r\n    \r\n    // Provide instant click effect and let the inconsequential animation follow later\r\n    callback && callback(data);\r\n\r\n    // Get a handle on the element click, and being animating\r\n    const target = ev.currentTarget;\r\n    !target.classList.contains(animationClass) && target.classList.add(animationClass);\r\n\r\n    setTimeout(()=>{\r\n\r\n      // A few moments have passed. Force stop the animation\r\n      // and execute the callback if any\r\n      target.classList.remove(animationClass);\r\n      // callback && callback(data);\r\n      \r\n    }, animationPeriod)\r\n  }\r\n\r\n  return onAnimatedClick;\r\n}","import React from \"react\";\r\nimport useClickAnimation from \"../custom-hooks/useClickAnimation\";\r\nimport \"./modal.css\";\r\n\r\ntype Props = {\r\n  children: React.ReactNode | React.ReactNode[],\r\n  show: boolean,\r\n  onClose: ()=>void,\r\n  containerExtraClasses?: string \r\n}\r\n\r\n\r\n\r\n// https://codemyui.com/tag/microinteractions/page/2/\r\nexport default function Modal({children, show, onClose, containerExtraClasses}: Props) {\r\n\r\n  const onAnimatedClick = useClickAnimation(\"animating\", 300, onClose)\r\n\r\n\r\n  return (\r\n    <div className={`modal__outer-container fixed left-0 right-0 top-0 bottom-0 bg-gray-800 flex items-center justify-center overflow-hidden container-frozen ${show ? \"modal--zoom-in--visible\" : \"modal--zoom-in--invisible\"}`}>\r\n      <div className={`modal__inner-container w-min max-w-11/12 bg-gray-600 p-2 rounded-sm relative ${containerExtraClasses}`}>\r\n        <>\r\n          <button onClick={onAnimatedClick} className={`modal__close-btn bg-inherit inline-flex justify-center items-center w-8 h-8 rounded-full absolute -top-3 -right-3 focus:outline-none`}>\r\n            <i className=\"fas fa-times\" aria-hidden=\"true\"></i>\r\n          </button>\r\n          {children}\r\n        </>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","export type TAction = {\r\n  type: string,\r\n  payload?: any\r\n}\r\n\r\nexport enum Direction {\r\n  UP = 1,\r\n  DOWN = 2,\r\n  LEFT = 3,\r\n  RIGHT = 4,\r\n}\r\n\r\nexport type TState = {\r\n  version: string,\r\n  user: ReduxUser,\r\n  nextSnakeDirection: Direction | null,\r\n  isPaused: boolean,\r\n  hasLost: boolean,\r\n  hasWon: boolean,\r\n  maximumScore: number\r\n  chronometerStart: number | null\r\n  chronometerCurrent: number,\r\n  levelScore: number\r\n}\r\n\r\nexport type TReducer = (state: TState, action: TAction) => TState\r\n\r\n\r\nexport type TUser = {\r\n  name: string,\r\n  last: SessionScore,\r\n  best: SessionScore,\r\n}\r\nexport type ReduxUser = {\r\n  name: string,\r\n  current: SessionScore\r\n}\r\n\r\nexport type SessionScore = {\r\n  timeScore: number,\r\n  pointScore: number,\r\n  level: number,\r\n  id: number,\r\n}","import { useLayoutEffect } from \"react\";\r\nimport { Direction } from \"../store/type\";\r\n\r\n\r\n\r\n\r\nexport type Point = {\r\n  x: number,\r\n  y: number\r\n}\r\nexport type Snake = {\r\n  body: Point[],\r\n  direction: Direction\r\n}\r\n\r\n/**\r\n * Takes a point 'p' and return a new point that is positioned where the old point would\r\n * have been if it had moved one step/grid square along \"direction\" \r\n * @date 2021-01-11\r\n * @param {Point} p: Point\r\n * @param {Direction} direction: Direction (up, down, left, right)\r\n * @returns {Point}: Point\r\n */\r\nexport const translate = (p: Point, direction: Direction): Point => {\r\n  if(direction === Direction.UP) return {x: p.x, y: p.y - 1};\r\n  if(direction === Direction.DOWN) return {x: p.x, y: p.y + 1};\r\n  if(direction === Direction.LEFT) return {x: p.x - 1, y: p.y};\r\n  return {x: p.x + 1, y: p.y};\r\n}\r\n\r\n/**\r\n * Get the coordinate of an initial state. Typically, 3 squares in an \r\n * horizontal line starting from the center of the board and going back \r\n * towards the left.\r\n * \r\n * @date 2021-01-11\r\n * @param {any} rows: number - The number of rows in the board\r\n * @param {any} cols: number - The number of columns in the board\r\n * @returns {any}\r\n */\r\nexport const getInitialSnake = (rows: number, cols: number): Snake=>{\r\n  const length = 3\r\n  const center: Point = { x: Math.floor(rows / 2), y: Math.floor(cols / 2) }\r\n  const snake = Array(length).fill(0).reduce((acc: Point[]) => [...acc, translate(acc[acc.length - 1], Direction.LEFT)], [center])\r\n  return { body: snake, direction: Direction.RIGHT};\r\n} \r\n\r\n/**\r\n * The current snake needs to step one step along \"direction\".\r\n * \r\n * The function will create a new point (head) in that direction, extract the last element from the current snake.\r\n * The new snake returned is \"head\" and the rest of the current snake without its last point unless the new head \r\n * assimilates the crumb.\r\n * \r\n * If not, the last element is returned to be erased from the ui.\r\n * If the crumb is assimilated, tail remain part of the snake\r\n * \r\n * @date 2021-01-11\r\n * @param {Point[]} oldSnake: Point[]\r\n * @param {Direction} direction: Direction (up, down, left, right)\r\n * @returns {Point[]}: Point[]\r\n */\r\nexport const getNewSnake = (oldSnake: Point[], direction: Direction, crumb: Point) => {\r\n  const newHead = translate(oldSnake[0], direction);\r\n  const hasAssimilatedCrumb = arePointsEqual(newHead, crumb);\r\n  const newBody = oldSnake.slice(0, oldSnake.length - (hasAssimilatedCrumb ? 0 : 1));\r\n  const tail = hasAssimilatedCrumb ? [] : [oldSnake[oldSnake.length - 1]];\r\n  return [[newHead, ...newBody], tail]\r\n}\r\n\r\n/**\r\n * Effect that runs once that layout is settled to measure the actual width and height of \"target\" element.\r\n * Once these values have been captured, the callback function cb is called with these: cb(width, height)\r\n * \r\n * @date 2021-01-11\r\n * @param { HTMLElement } target: HTMLElement whose dimensions must be taken\r\n * @param { Function } cb: Function called when dimensions are measured\r\n * @returns { void }: None\r\n */\r\nexport const useBoardDimension = (target: HTMLElement | null, cb: (clientWidth: number, clientHeight: number) => void)=>{\r\n  useLayoutEffect(()=>{\r\n    !target && cb(1, 1);\r\n    target && cb(target.clientWidth, target.clientHeight);\r\n  }, [target, cb])\r\n}\r\n\r\n/**\r\n * Effectful function - Interacts with DOM\r\n * \r\n * Function iterates through all the elements of the \"snake\" input and add (\"addClass\" is true) or \r\n * remove (\"addClass\" is false) the input css class \"cssClass\" from the corresponding node/square grid on the ui.\r\n * \r\n * The function relies on having a reference to the parent HTML node \"target\" that contains the game grid\r\n * @date 2021-01-11\r\n * @param {HTMLElement|null} target: HTMLElement|null - Parent HMTL node containing the grid elements\r\n * @param {Point[]} snake: Point[] - Current snake\r\n * @param {astringny} cssClass: string - the css class to add to the snake square. This class is used to style the body of the snake in css.\r\n * @param {boolean} addClass: boolean = false - By default, the function adds the css class to the snake elements\r\n * @returns {void}: None\r\n */\r\nexport const markSnake = (target: HTMLElement | null, snake: Point[], cssClass: string, addClass: boolean = false) => {\r\n  if(!target) return;\r\n  snake.forEach(item => {\r\n    const itemNode = target.querySelector(`.grid-item.row-${item.y}.col-${item.x}`);\r\n    addClass && !itemNode?.classList.contains(cssClass) && itemNode?.classList.add(cssClass);\r\n    !addClass && itemNode?.classList.remove(cssClass);\r\n  })\r\n}\r\n\r\n\r\n/**\r\n * Convert a number \"n\" to an integer than a string. The string is expected to have a minimum \r\n * width of \"size\" and it is padded with \"0\" to fulfill this requirement.\r\n * \r\n * @date 2021-01-11\r\n * @param {number} n: number - number to convert to string\r\n * @param {number} size: number - min width of resulting string\r\n * @returns {string}: string - \"n\" as padded string and of width \"size\" \r\n */\r\nconst intToPaddedString = (n: number, size: number) => {\r\n  const s = Array(size).fill(\"0\").join(\"\") + parseInt(n + \"\"); \r\n  return s.substr(s.length - size, size);\r\n}\r\n\r\n/**\r\n * Convert a number of secs to a time format (i.e. \"125\" sec is transformed \"02:05\" secs)\r\n * \r\n * @date 2021-01-11\r\n * @param {number} secs: number - Number of seconds\r\n * @returns {string}: string\r\n */\r\nexport const secsToString = (secs: number): string => (Math.floor(secs/60) === 0 ? \"\" : secsToString(Math.round(secs/60)) + \":\") + intToPaddedString(secs % 60, 2);\r\n\r\n\r\n\r\n/**\r\n * Given two direction, determine whether they are parallel or perpendicular in which case the both directions are different.\r\n * @date 2021-01-12\r\n * @param {Direction} dir1:Direction\r\n * @param {Direction} dir2:Direction\r\n * @returns {boolean}: boolean\r\n */\r\nexport const hasDirectionChanged = (dir1: Direction, dir2: Direction) => {\r\n  const horizontalDirs = [Direction.LEFT, Direction.RIGHT];\r\n  const verticalDirs = [Direction.UP, Direction.DOWN];\r\n  if(horizontalDirs.includes(dir1) && horizontalDirs.includes(dir2)) return false;\r\n  if(verticalDirs.includes(dir1) && verticalDirs.includes(dir2)) return false;\r\n  return true\r\n}\r\n\r\n/**\r\n * Generate a random Point with coordinates between 0 and rows or cols for y and x respectively.\r\n * \r\n * @date 2021-01-12\r\n * @param {number} rows:number\r\n * @param {number} cols:number\r\n * @returns {Point}\r\n */\r\nconst getRandomPoint = (rows: number, cols: number): Point => ({\r\n  x: Math.floor(Math.random() * (cols - 1)), \r\n  y: Math.floor(Math.random() * (rows - 1))\r\n})\r\n\r\n/**\r\n * Verifies whether a point does not occupies the same physical space as List of points.\r\n * \r\n * @date 2021-01-12\r\n * @param {Point} p:Point\r\n * @param {Point[]} snakeBody:Point[]\r\n * @returns {boolean}: True when p does not have the same coordinates as any points of snakeBody\r\n */\r\nconst doesPointBelongToSnake = (p: Point, snakeBody: Point[]): boolean => snakeBody.reduce(\r\n  (acc: boolean, curr) => acc || arePointsEqual(curr, p), \r\n  false\r\n)\r\n/**\r\n * Function will randomly create a point on the board and ensure that the point does not intersect with\r\n * the snake body\r\n * @date 2021-01-12\r\n * @param {number} rows:number of rows in game board\r\n * @param {number} cols:number of rows in game board\r\n * @param {Point[]} snakeBody:Point[] - List of Point/Grid square that make up the snake body\r\n * @returns {Point}: Point - The randomly generated crumb\r\n */\r\nexport const getNewCrumb = (rows: number, cols: number, snakeBody: Point[]) => {\r\n  let p: Point = snakeBody[0];\r\n  while(doesPointBelongToSnake(p, snakeBody)) p = getRandomPoint(rows, cols);\r\n  return p;\r\n}\r\n\r\n/**\r\n * Checks whether two point (with coordinates x and y) are the same\r\n * @date 2021-01-12\r\n * @param {any} p1:Point\r\n * @param {any} p2:Point\r\n * @returns {any}\r\n */\r\nexport const arePointsEqual = (p1: Point, p2: Point) => ((p1.x === p2.x) && (p1.y === p2.y))","import { useCallback, useEffect, useRef, useState } from \"react\"\r\nimport { useBoardDimension } from \"../game/utils\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Send back all number of the form: start + (delta * k)\r\n * Where k can be any non-zero positive integer as long as the resulting number stays less than end\r\n * \r\n * These number form an arithmetic progression.\r\n * \r\n * @date 2021-01-13\r\n * @param {number} delta:number - Distance between two consecutive produced numbers\r\n * @param {number} start:number - The initial point to which delta is added \r\n * @param {number} end:number - The maximum limit for the numbers produced\r\n * @returns {number[]} - List of numbers forming an arithmetic progression between start and end.\r\n */\r\nconst getProgressionUntil = (delta: number, start: number, end: number): number[] => \r\n  start < end \r\n  ? [start, ...getProgressionUntil(delta, start + delta, end)] \r\n  : []\r\n\r\n/**\r\n * Given the available length (\"items\" input), and the occupied length (\"length\" input), return how much\r\n * space must be added on the both side of the occupied space for it to be centered.\r\n * @date 2021-01-13\r\n * @param {number} items:number\r\n * @param {number} length:number\r\n * @returns {number} - how much length to put on each side of \"length\" for it to be centered in \"items\"\r\n */\r\nconst getMargin = (items: number, length: number) => \r\n  Math.max(Math.floor((items - length)/2), 0) \r\n\r\n\r\n\r\n/**\r\n * Contruct a snake logo on a grid (rows x cols). The snake logo must be drawn over \"xWidth\" cols and \"yHeight\" rows\r\n * @date 2021-01-13\r\n * @param {any} rows:number\r\n * @param {any} cols:number\r\n * @param {any} xWidth:number\r\n * @param {any} yHeight:number\r\n * @returns {any}\r\n */\r\nexport const getLogo = (rows: number, cols: number, xWidth: number, yHeight: number)=>{\r\n\r\n  const filter = (item: number, index: number) => index >= getMargin(cols, xWidth) && index < cols - getMargin(cols, xWidth)\r\n\r\n  // Find row of most top point\r\n  const topMargin = getMargin(rows, yHeight)\r\n\r\n  // Find entries on all 3 horizontal lines of the snake on grid\r\n  const row_top = Array(cols).fill(0).map((item, index) => cols * topMargin + index).filter(filter)\r\n  const row_center = Array(cols).fill(0).map((item, index) => cols * Math.floor(topMargin + yHeight * .5) + index).filter(filter)\r\n  const row_bottom = Array(cols).fill(0).map((item, index) => cols * (topMargin + yHeight) + index).filter(filter)\r\n\r\n  // Add the vertical bars for our snake logo\r\n  const col_left = getProgressionUntil(cols, row_top[0], row_center[0])\r\n  const col_right = getProgressionUntil(cols, row_center[row_center.length - 1], row_bottom[row_bottom.length - 1])\r\n\r\n  const first = row_bottom[0] - cols;\r\n  const last = row_top[row_top.length - 1] + cols;\r\n\r\n  // Remove duplicates, sort and return\r\n  const logo = new Set([first, ...row_bottom, ...col_right.reverse(), ...row_center.reverse(), ...col_left.reverse(), ...row_top, last]);\r\n  // const logo = new Set([...row_top, ...row_center, ...row_bottom, ...col_left, ...col_right]);\r\n  return Array.from(logo).reverse();\r\n  // return Array.from(logo).sort((a, b) => a - b);\r\n} \r\n\r\n\r\n\r\n/**\r\n * Various Incrementing functions\r\n */\r\nconst increment = (low: number, high: number, curr: number) => curr >= high ? low : curr + 1\r\n// const circularIncrement = (low: number, high: number, curr: number) => increment(low, high, curr) > high ? low : increment(low, high, curr);\r\n// function* circularIterator(data: number[], start: number){\r\n//   let index = ((start > data.length - 1) || (start < 0)) ? 0 : start;\r\n//   let counter = 0;\r\n//   while(++counter < data.length){\r\n//     yield data[index];\r\n//     index = increment(0, data.length - 1, index);\r\n//   }\r\n//   return counter;\r\n// }\r\n\r\n/**\r\n * Given an index return a point on the straight line that passes by (x = 0, y = start) and (x = intervals, y = end).\r\n * \"index\" is actually a x coordinates between 0 and intervals, and the function returns the corresponding y coordinates.\r\n * @date 2021-01-13\r\n * @param {number} start:number\r\n * @param {number} end:number\r\n * @param {number} intervals:number\r\n * @param {number} index:number\r\n * @returns {number}\r\n */\r\nconst linearIncrement = (start: number, end: number, intervals: number, index: number) => start + index * (end - start) / intervals;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function LogoBoard(){\r\n\r\n  const [gridData, setGridData] = useState({cols: 1,rows: 1})\r\n  const gridSize = 20;\r\n  const xLength = 6;\r\n  const yLength = 10;\r\n  const {cols: grid_cols, rows: grid_rows} = gridData;\r\n  const grid = Array(grid_rows * grid_cols).fill(0).map((item, index) => ({row: Math.floor(index / grid_cols), col: index % grid_cols, index: index}))\r\n\r\n\r\n  const boardRef = useRef<HTMLDivElement>(null);\r\n  const getBoardDimension = useCallback((width, height) => setGridData({cols: Math.floor(width / gridSize), rows: Math.floor(height / gridSize)}), [])\r\n  useBoardDimension(boardRef.current, getBoardDimension)\r\n  \r\n\r\n  const logoBody = getLogo(grid_rows, grid_cols, xLength, yLength);\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Main effect. It draws the snake logo in perpetual movement\r\n   */\r\n  useEffect(()=>{\r\n    let currPos = 0;\r\n    const snakeLength = logoBody.length //20\r\n    \r\n    const interval = setInterval(()=>{\r\n\r\n      currPos = increment(0, logoBody.length - 1, currPos);\r\n      let processed = 0;\r\n      let current = currPos - 1;\r\n      while(processed < logoBody.length - 1){\r\n        processed++;\r\n        current = increment(0, logoBody.length - 1, current);\r\n\r\n        const target = boardRef.current?.querySelector(`.grid-item.idx-${logoBody[current]}`);\r\n        if(!target) continue;\r\n        target.classList.remove(\"logo-snake\");\r\n        if(processed < snakeLength)target.classList.add(\"logo-snake\");\r\n        if(processed < snakeLength)(target as HTMLElement).style.opacity = `${linearIncrement(0, 1, snakeLength, processed)}`;\r\n      }\r\n      \r\n    }, 100) \r\n    return () => clearInterval(interval)\r\n  })\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"logo-inner-container\" ref={boardRef}>\r\n    {\r\n      grid.map((item, index) => (<div key={index} className={`grid-item idx-${item.index} row-${item.row} col-${item.col}`}></div>))\r\n    }\r\n    </div>\r\n  )\r\n}","import React, { useState } from \"react\"\r\nimport { TextInput } from \"../custom-form-controls/input-with-moving-label\"\r\nimport Modal from \"../custom-misc-controls/modal\"\r\nimport { TUser } from \"../store/type\"\r\nimport \"./index.css\"\r\nimport LogoBoard from \"./logo\"\r\n\r\ntype Props = {\r\n  onLogin: (user: TUser)=>void\r\n  addUser: (user: string)=>TUser\r\n  getUserByName: (username: string)=>TUser|undefined\r\n}\r\n\r\n\r\n\r\n\r\nconst isUsernameValid = (value: string | null | undefined)=> value && value !== \"\" && value !== null && value !== undefined;\r\n\r\n\r\n\r\nexport default function Login({onLogin, getUserByName, addUser}:Props){\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [showValidatedForm, setShowValidatedForm] = useState(false);\r\n  \r\n  /**\r\n   * User wants to login as \"username\". Verify that \"username\" is registered in users db object (\"users\" arguments from local storage)\r\n   * If user is registered, proceed to login user.\r\n   * If user is not registered, pull modal to get from user, how we should proceed.\r\n   */\r\n  const handleOnLogin = (username: string)=>{\r\n    setShowValidatedForm(true);\r\n    if(!isUsernameValid(username)) return\r\n    const user = getUserByName(username);\r\n    user && onLogin(user);\r\n    !user && setShowModal(true);\r\n  }\r\n  /**\r\n   * User \"username\" is not registered in users db object.\r\n   * User either indicated that this new user must be registered (\"doRegisterUser\" is true), \r\n   * or we should abort the login process (\"doRegisterUser\" is false).\r\n   * If doRegisterUser is True, login, schedule an effect to update storage and app cache\r\n   */\r\n  const handleUnkownUserResponse = (username: string, doRegisterUser : boolean) => {\r\n    if(!isUsernameValid(username)) return\r\n    doRegisterUser && onLogin(addUser(username));\r\n    !doRegisterUser && setUsername(\"\");\r\n    setShowModal(false);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <section id=\"login\" className=\"flex flex-col w-full height-100vh p-6 m-auto flex-wrap justify-center max-w-lg md:max-w-screen-xl\">\r\n\r\n      <header className=\"logo-container flex-auto md:flex-full md:w-5/12 md:mr-10 lg:mr-20 lg:flex lg:items-center\">\r\n        <LogoBoard/>\r\n      </header>\r\n\r\n      <main className=\"main-text pt-8 flex-initial md:w-5/12 md:max-w-sm md:mx-4 lg:mr-auto lg:max-w-screen-lg\">\r\n        <h1 className=\"text-3xl md:text-4xl lg:text-5xl pb-2 md:pb-8 text-gray-600 \">Snake Game</h1>\r\n        <h2 className=\"text-gray-500 md:text-xl lg:text-2xl\">A most addictive game. <br/>Enter username to start playing.</h2>\r\n      </main>\r\n\r\n      <footer className=\"form-container mt-4 flex-initial md:mt-20 md:max-w-sm md:mx-4\">\r\n        <TextInput value={username} setValue={val => setUsername(val + \"\")} label=\"Enter Username\" fontawesomeClass=\"fas fa-user\" extraClasses={showValidatedForm && !isUsernameValid(username) ? \"invalid\" : \"\"}/>\r\n        <button className=\"btn w-full mt-16\" onClick={()=>handleOnLogin(username)}>Start</button>\r\n      </footer>\r\n\r\n      <Modal show={showModal} onClose={()=>setShowModal(false)} containerExtraClasses=\"new-user-container\">\r\n        <UnknownUser name={username} onResponse={ res => handleUnkownUserResponse(username, res) }/>\r\n      </Modal>\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype UnknownUserProps = {\r\n  name: string,\r\n  onResponse: (registerUser: boolean)=>void\r\n}\r\n/**\r\n * Modal for when logging in as a new user. Do we register? or do we retry logging in?\r\n */\r\nfunction UnknownUser({onResponse, name}: UnknownUserProps){\r\n  return (\r\n    <div className=\"new-user p-4 rounded-lg\">\r\n\r\n      <div>\r\n        <h1 className=\"text-lg font-bold mb-8\">New User</h1>\r\n        <p> We could not find user \"<strong>{name}</strong>\" in our records.<br/></p>\r\n        <p> Would you like to register \"<strong>{name}</strong>\" as a new user?<br/></p>\r\n      </div>\r\n\r\n      <div className=\"flex color-main justify-between flex-wrap \">\r\n        <button onClick={() => onResponse(false)} className=\"btn btn-secondary p-4 mt-8 mx-2\">No, Return</button>\r\n        <button onClick={() => onResponse(true)} className=\"btn mt-8 mx-2\">Yes, Register</button>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}","import \"./hamburger-menu-control.css\"\r\n\r\n\r\ntype Props = {\r\n  state: boolean,\r\n  onChange: (newState: boolean) => void\r\n}\r\nexport default function Hamburger({onChange, state}:Props){\r\n\r\n\r\n  return (\r\n    <div className=\"hamburger-menu-container\">\r\n      <input type=\"checkbox\" id=\"hamburger-menu-checkbox\" checked={state} onChange={e=>onChange(e.target.checked)}/>\r\n      <label htmlFor=\"hamburger-menu-checkbox\" className=\"hamburger-menu\">\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n      </label>\r\n    </div>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/snake-game-logo-sm.1ad9620f.gif\";","import { useCallback, useEffect, useRef, useState } from \"react\"\r\nimport { Direction, ReduxUser } from \"../store/type\";\r\nimport { arePointsEqual, getInitialSnake, getNewCrumb, getNewSnake, hasDirectionChanged, markSnake, Point, Snake, useBoardDimension } from \"./utils\";\r\n\r\n\r\ntype Props = {\r\n  grabNextDirection: ()=> Direction | null,\r\n  notifyGameFailure: ()=> void,\r\n  onTimerTick: ()=> void,\r\n  notifyScorePoint: ()=> void,\r\n  isPaused: boolean,\r\n  hasLost: boolean,\r\n  hasWon: boolean,\r\n  user: ReduxUser\r\n}\r\n\r\nexport default function Board({grabNextDirection, isPaused, hasLost, hasWon, notifyGameFailure, notifyScorePoint, user, onTimerTick}: Props){\r\n\r\n  const [gridData, setGridData] = useState({cols: 1,rows: 1})\r\n  const gridSize = 20;\r\n  const {cols: grid_cols, rows: grid_rows} = gridData;\r\n  const grid = Array(grid_rows * grid_cols).fill(0).map((item, index) => ({row: Math.floor(index / grid_cols), col: index % grid_cols, index: index}))\r\n\r\n\r\n\r\n  // Get the dimensions of the board, the first time the layout is settled. Store these in gridData\r\n  const boardRef = useRef<HTMLDivElement>(null);\r\n  const getBoardDimension = useCallback((width, height) => setGridData({cols: Math.floor(width / gridSize), rows: Math.floor(height / gridSize)}), [])\r\n  useBoardDimension(boardRef.current, getBoardDimension)\r\n  \r\n\r\n\r\n\r\n  const snakeCSSClass = \"is-of-body\";\r\n  const crumbCSSClass = \"is-crumb\";\r\n  const gameControls = useRef<{snake: Snake, crumb: Point | null}>({\r\n    snake: getInitialSnake(grid_rows, grid_cols),\r\n    crumb: null\r\n  });\r\n  // This effect draws the initial snake on screen. Should only run once or twice\r\n  useEffect(()=>{\r\n    gameControls.current.snake = getInitialSnake(grid_rows, grid_cols);\r\n    markSnake(boardRef.current, gameControls.current.snake.body, snakeCSSClass, true);\r\n\r\n    // Cleanup current snake on screen\r\n    return () => markSnake(boardRef.current, gameControls.current.snake.body, snakeCSSClass, false);\r\n  }, [grid_rows, grid_cols, user.current.id])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const getManagementControls = ()=>({\r\n    getNextDirection: grabNextDirection,\r\n    getPausedState: () => isPaused,\r\n    getLostState: () => hasLost,\r\n    getWonState: () => hasWon,\r\n    notifyGameFailure: notifyGameFailure,\r\n    notifyCrumbAssimilation: notifyScorePoint,\r\n    getLevelSpeed: () => 500 - 50 * user.current.level,\r\n    onTimerTick: onTimerTick,\r\n  })\r\n  // Provide a way for the setInterval to reference the updated grabNextDirection and not \r\n  // the original value by closure\r\n  const managementControls = useRef(getManagementControls());\r\n  // Supporting effect, to update container for grabNextDirection so that the interval\r\n  // function always has the latest value\r\n  useEffect(()=>{\r\n    managementControls.current = getManagementControls()\r\n  }, [grabNextDirection, isPaused, notifyGameFailure, user.current.id])\r\n\r\n  // Tick effect, runs every so many millisecond. It is responsible for forcing\r\n  // the snake into movement. If the user hasnot provided a direction from (obtained from \"grabNextDirection\")\r\n  // the snake will move along its current heading\r\n  useEffect(()=>{\r\n    const interval = setInterval(()=>{\r\n      \r\n      // If state is paused or terminated, do nothing\r\n      if(managementControls.current.getPausedState()) return;\r\n      if(managementControls.current.getLostState()) return;\r\n      if(managementControls.current.getWonState()) return;\r\n\r\n      // Notify store to update user game time score\r\n      managementControls.current.onTimerTick();\r\n\r\n      // Make sure we have a crumb on the board\r\n      if(gameControls.current.crumb === null) {\r\n        const crumb = getNewCrumb(grid_rows, grid_cols, gameControls.current.snake.body);\r\n        gameControls.current.crumb = crumb;\r\n        const crumbNode = boardRef.current?.querySelector(`.grid-item.row-${crumb.y}.col-${crumb.x}`);\r\n        crumbNode?.classList.add(crumbCSSClass);\r\n      };\r\n      const crumb = gameControls.current.crumb;\r\n\r\n      // Get Snake direction\r\n      const nextDirection = managementControls.current.getNextDirection();\r\n      if(hasDirectionChanged(nextDirection || gameControls.current.snake.direction, gameControls.current.snake.direction)){\r\n        gameControls.current.snake.direction = nextDirection || gameControls.current.snake.direction;   \r\n      }\r\n  \r\n\r\n      // Build new body, and get tail\r\n      const [newSnake, tail] = getNewSnake(gameControls.current.snake.body, gameControls.current.snake.direction, crumb);\r\n      gameControls.current.snake.body = newSnake;\r\n      \r\n\r\n      // Draw snake head at new coordinates after movement\r\n      const headNode = boardRef.current?.querySelector(`.grid-item.row-${newSnake[0].y}.col-${newSnake[0].x}`);\r\n      const isInvalidHead = !headNode || headNode.classList.contains(snakeCSSClass) || (newSnake[0].x < 0) ||(newSnake[0].x >= grid_cols) || (newSnake[0].y < 0)|| (newSnake[0].y >= grid_rows);\r\n      // If new head is invalid, either because it sitting on top of another part of the body snake, \r\n      // or if it exists outside the borders of the board\r\n      isInvalidHead && managementControls.current.notifyGameFailure();\r\n      // Otherwise, we are good, draw it\r\n      !isInvalidHead && headNode?.classList.add(snakeCSSClass);\r\n\r\n\r\n\r\n      // // Handle the case where the snake assimilates the current crumb on screen\r\n      const assimilatedCrumb = arePointsEqual(newSnake[0], gameControls.current.crumb);\r\n      if(assimilatedCrumb){ \r\n        const crumb = gameControls.current.crumb;\r\n        gameControls.current.crumb = null;\r\n        const crumbNode = boardRef.current?.querySelector(`.grid-item.row-${crumb.y}.col-${crumb.x}`);\r\n        crumbNode?.classList.remove(crumbCSSClass);\r\n        managementControls.current.notifyCrumbAssimilation();\r\n        return;\r\n      }\r\n\r\n\r\n      // // Erase last snake element\r\n      if(tail.length === 0) return;\r\n      const tailNode = boardRef.current?.querySelector(`.grid-item.row-${tail[0].y}.col-${tail[0].x}`);\r\n      tailNode?.classList.remove(snakeCSSClass);\r\n\r\n    }, managementControls.current.getLevelSpeed());\r\n\r\n    return () => clearInterval(interval);\r\n  }, [grid_cols, grid_rows, user.current.id])\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"logo-inner-container\" ref={boardRef}>\r\n    {\r\n      grid.map((item, index) => (\r\n        <div key={index} className={`grid-item idx-${item.index} row-${item.row} col-${item.col}`}></div>\r\n      ))\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import useClickAnimation from \"../custom-hooks/useClickAnimation\"\r\n\r\ntype KeypadProps = {\r\n  onKeyPress: (key: string)=> void,\r\n  isPaused: boolean\r\n}\r\n\r\nexport default function Keypad({onKeyPress, isPaused}:KeypadProps){\r\n\r\n  const animatedClick = useClickAnimation(\"animating\", 500, onKeyPress)\r\n  \r\n  return (\r\n\r\n    <div className=\"game-keypad grid mx-auto w-full\">\r\n\r\n      <div className=\"flex justify-center items-center\"><button className=\"game-control rounded-full w-14 h-14 bg-transparent flex justify-center items-center\" onClick={e => animatedClick(e, \"RESET\")}><i className=\"fas fa-reply\"></i></button></div>\r\n      <div className=\"flex justify-center items-center\"></div>\r\n      <div className=\"flex justify-center items-center\"><button className=\"game-control rounded-full w-14 h-14 bg-transparent flex justify-center items-center\" onClick={e => animatedClick(e, \"PAUSE\")}><i className={`fas fa-${isPaused ? \"play\" : \"pause\"}`}></i></button></div>\r\n\r\n      <div className=\"flex justify-center items-center\"></div>\r\n      <div className=\"flex justify-center items-center\"><button className=\"game-control rounded-full w-14 h-14 bg-transparent flex justify-center items-center\" onClick={e => animatedClick(e, \"DIRECTION_UP\")}><i className=\"fas fa-play transform -rotate-90\"></i></button></div>\r\n      <div className=\"flex justify-center items-center\"></div>\r\n\r\n      <div className=\"flex justify-center items-center\"><button className=\"game-control rounded-full w-14 h-14 bg-transparent flex justify-center items-center\" onClick={e => animatedClick(e, \"DIRECTION_LEFT\")}><i className=\"fas fa-play transform rotate-180\"></i></button></div>\r\n      <div className=\"flex justify-center items-center\"></div>\r\n      <div className=\"flex justify-center items-center\"><button className=\"game-control rounded-full w-14 h-14 bg-transparent flex justify-center items-center\" onClick={e => animatedClick(e, \"DIRECTION_RIGHT\")}><i className=\"fas fa-play \"></i></button></div>\r\n\r\n      <div className=\"flex justify-center items-center\"></div>\r\n      <div className=\"flex justify-center items-center\"><button className=\"game-control rounded-full w-14 h-14 bg-transparent flex justify-center items-center\" onClick={e => animatedClick(e, \"DIRECTION_DOWN\")}><i className=\"fas fa-play transform rotate-90\"></i></button></div>\r\n      <div className=\"flex justify-center items-center\"></div>\r\n      \r\n    </div>\r\n\r\n  )\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Hamburger from \"../custom-misc-controls/hamburger-menu-control\";\r\nimport Modal from \"../custom-misc-controls/modal\";\r\nimport { Direction, ReduxUser } from \"../store/type\";\r\nimport logo from \"./assets/snake-game-logo-sm.gif\"\r\nimport Board from \"./board\";\r\nimport \"./index.css\"\r\nimport Keypad from \"./keypad\";\r\nimport { secsToString } from \"./utils\";\r\ntype Props = {\r\n  user: ReduxUser,\r\n  nextSnakeDirection: Direction | null,\r\n  onChangePauseState: () => void,\r\n  onNextDirection: (dir: Direction)=>void,\r\n  grabNextDirection: () => Direction | null,\r\n  onResetGame: ()=>void,\r\n  notifyGameFailure: ()=>void,\r\n  notifyScorePoint: ()=>void,\r\n  onResultFeedback: ()=>void,\r\n  onTimerTick: ()=>void,\r\n  isPaused: boolean,\r\n  hasLost: boolean,\r\n  hasWon: boolean,\r\n  level: number\r\n  gameTimeScore: number,\r\n  DetailsFC: React.FC\r\n}\r\n\r\n\r\n\r\nexport default function Game({user, notifyGameFailure, onChangePauseState, onResetGame, onNextDirection, DetailsFC, gameTimeScore, isPaused, hasLost, hasWon, grabNextDirection, onResultFeedback, notifyScorePoint, level, onTimerTick}:Props){\r\n\r\n  const [isPaneOpen, setIsPaneOpen] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const uiRef = useRef<HTMLElement|null>(null);\r\n\r\n\r\n  /**\r\n   * Function handles keys from the physical keyboard or the keypad on the ui\r\n   */\r\n  const handleKeyPress = (key: string) => {\r\n    if(key === \" \") return onChangePauseState();\r\n    if(key === \"PAUSE\") return onChangePauseState();\r\n    if(key === \"RESET\") return onResetGame();\r\n    if(key === \"r\") return onResetGame();\r\n    if(key === \"DIRECTION_UP\") return onNextDirection(Direction.UP);\r\n    if(key === \"DIRECTION_DOWN\") return onNextDirection(Direction.DOWN);\r\n    if(key === \"DIRECTION_LEFT\") return onNextDirection(Direction.LEFT);\r\n    if(key === \"DIRECTION_RIGHT\") return onNextDirection(Direction.RIGHT);\r\n    if(key === \"ArrowUp\") return onNextDirection(Direction.UP);\r\n    if(key === \"ArrowDown\") return onNextDirection(Direction.DOWN);\r\n    if(key === \"ArrowLeft\") return onNextDirection(Direction.LEFT);\r\n    if(key === \"ArrowRight\") return onNextDirection(Direction.RIGHT);\r\n  }\r\n\r\n\r\n\r\n  const onResultFeedbackWrapper = ()=>{\r\n    setShowModal(false);\r\n    onResultFeedback();\r\n    uiRef.current?.focus();\r\n  }\r\n\r\n  const modalClass = hasLost ? \"has-lost\" : hasWon ? \"has-won\" : \"\";\r\n  /**\r\n   * Effect responsible for showing the final pass/fail modals at the end of a game session.\r\n   */\r\n  useEffect(()=>{\r\n    hasLost && setShowModal(true);\r\n    hasWon && setShowModal(true);\r\n    uiRef.current?.focus();\r\n  }, [hasLost, hasWon])\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <section id=\"game\" ref={uiRef} className={`flex flex-col w-full height-100vh px-6 py-2 m-auto ${modalClass}`} tabIndex={0} onKeyDown={e=>handleKeyPress(e.key)}>\r\n\r\n\r\n      <header className=\"flex justify-between items-center h-8 mb-6 relative\">\r\n        <img src={logo} alt=\"Gif of a snake drawing a S\" className=\"h-6\"/>\r\n        <div className=\"\">\r\n          <span className=\"text-lg\">{user.name}</span>\r\n          <span className=\"ml-4\">{secsToString(gameTimeScore)}</span>\r\n          <span className=\"text-gray-400 ml-4\">{user.current.pointScore}</span>\r\n        </div>\r\n        <Hamburger state={isPaneOpen} onChange={setIsPaneOpen}/>\r\n      </header>\r\n\r\n\r\n      <main className=\"flex-auto\">\r\n        <Board grabNextDirection={grabNextDirection} isPaused={isPaused} user={user} hasLost={hasLost} hasWon={hasWon} notifyGameFailure={notifyGameFailure} onTimerTick={onTimerTick} notifyScorePoint={notifyScorePoint}/>\r\n        <div className={`side-pane fixed top-0 bottom-0 right-0 w-full p-4 pt-12 z-10 container-frozen ${isPaneOpen ? \"\" : \"-right-full\"}`}>\r\n          <DetailsFC/> \r\n        </div>\r\n      </main>\r\n\r\n\r\n      <footer className=\"game-footer -rotate-90mx-auto w-full mt-6\">\r\n        <Keypad onKeyPress={handleKeyPress} isPaused={isPaused}/>\r\n      </footer>\r\n\r\n      \r\n      <Modal show={showModal} onClose={onResultFeedbackWrapper} containerExtraClasses=\"new-user-container\">\r\n        <Results hasWon={hasWon} hasLost={hasLost} onResponse={onResultFeedbackWrapper} user={user}/> \r\n      </Modal>\r\n\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype ResultProps = {\r\n  hasLost: boolean,\r\n  hasWon: boolean,\r\n  user: ReduxUser,\r\n  onResponse: ()=>void\r\n}\r\n/**\r\n * Component displaying pass/fail at the end of a game session.\r\n */\r\nfunction Results({hasWon, hasLost, onResponse, user}: ResultProps){\r\n  return (\r\n    <div className=\"new-user p-4 rounded-lg\">\r\n\r\n      <div>\r\n        {\r\n          hasWon && (\r\n            <>    \r\n              <h1 className=\"text-lg font-bold mb-8\">Congratulations <strong>{user.name}</strong></h1>\r\n              <p> You have won at this level of difficulty. Congrats again!!</p>\r\n              <p> Score: {user.current.pointScore}<br/></p>\r\n              <p> Time: {secsToString(user.current.timeScore)}<br/></p>\r\n              <p> Difficulty Level: Level {user.current.level + 1}<br/><br/><br/></p>\r\n              <p> Do you want to move to next level?</p>\r\n            </>\r\n          )\r\n        }\r\n        {\r\n          hasLost && (\r\n            <>    \r\n              <h1 className=\"text-lg font-bold mb-8\">Sorry <strong>{user.name}</strong></h1>\r\n              <p> It seems that the current difficulty level was too great.</p>\r\n              <p> Score: {user.current.pointScore}<br/></p>\r\n              <p> Time: {secsToString(user.current.timeScore)}<br/></p>\r\n              <p> Difficulty Level: Level {user.current.level + 1}<br/><br/><br/></p>\r\n              <p> Do you want to restart?</p>\r\n            </>\r\n          )\r\n        }\r\n      </div>\r\n\r\n      <div className=\"flex color-main justify-between flex-wrap \">\r\n        {hasWon && (<button onClick={() => onResponse()} className=\"btn mt-8 mx-2\">Yes! On to next Level</button>)}\r\n        {hasLost && (<button onClick={() => onResponse()} className=\"btn mt-8 mx-2\">Let's Restart</button>)}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}","export const isOnProductionHost = () => /(localhost|127.0.0.1|127.0.0.0|0.0.0.0)/.exec(window.location.origin) === null;\r\n\r\n\r\nexport const addThousandSeparator = (inp: string, separator: string = \" \", pos?: number): string => { \r\n  \r\n  // Ensure we only deal with integers as strings\r\n  if(`${parseInt(inp.replaceAll(\" \",\"\"))}` !== inp) return inp;\r\n\r\n  // When pos is not defined, the recursion is about to start\r\n  // set position to the far right of the string\r\n  pos = pos || inp.length; \r\n  if(pos - 3 <= 0) return inp;\r\n  \r\n  // Add the separator, and recurse\r\n  inp = `${inp.substr(0, pos - 3)}${separator}${inp.substr(pos - 3)}`;\r\n  return addThousandSeparator(inp, separator, pos - 3);\r\n}\r\n\r\n","// https://javascriptio.com/view/4915713/react-navigation-that-will-smooth-scroll-to-section-of-the-page\r\n// https://codesandbox.io/s/falling-https-jwrj3?file=/src/App.tsx:636-686\r\n// https://stackoverflow.com/a/16171238/9034699\r\n\r\nimport { useEffect, useMemo } from \"react\";\r\n/**\r\n * When using multiple components on the same with different react router 'routes',\r\n * this hook will use (smooth) transition to get to bring the component with 'targetID' to\r\n * the top left of the page.\r\n * \r\n * \r\n * @param  {string} targetID\r\n * @param  {any} clickEvent?\r\n * @param  {string} targetURI?\r\n * @param  {boolean=false} smooth\r\n */\r\nexport const scrollIDIntoViewHelper = (targetID: string, clickEvent?: any, targetURI?: string, smooth: boolean = false)=>{\r\n  \r\n  // We are essentially hijacking the click event which does not really work with react router\r\n  clickEvent && clickEvent.preventDefault && clickEvent.preventDefault();\r\n\r\n  // Scroll element with provided id into view\r\n  const targetElmt = document.getElementById(targetID);\r\n  targetElmt && targetElmt.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n\r\n  // Update the url\r\n  targetURI && window.history.pushState(targetID, targetID, `/${targetURI ? targetURI : targetID}`);\r\n}\r\n\r\n// useEffect(scrollURLIDIntoViewHelper) use with interval?\r\n/**\r\n * When using multiple components on the same with different react router 'routes',\r\n * this hook will use (smooth) transition to get to bring the component with 'targetID' to\r\n * the top left of the page.\r\n * This hook assumes that the route is actually the id of the component to scroll to\r\n * \r\n * @param  {boolean=false} smooth\r\n */\r\nexport const scrollURLIDIntoViewHelper = (smooth: boolean = false)=>{\r\n  \r\n  // This function assumes that the last uri corresponds to the id of the element\r\n  // that must be scrolled into view\r\n  const url = window.location.href.split(\"/\");\r\n  const target = url[url.length - 1];//.toLowerCase();\r\n  const element = document.getElementById(target);\r\n\r\n  // Adjust view to display component with id from uri\r\n  element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n}\r\n\r\n/**\r\n * This function will ensure that the application is redirected to \r\n * the \"uri\" input argument on load/page refresh.\r\n * \r\n * @param  {string=\"Home\"} uri\r\n */\r\nexport const useResetURIOnLoad = (uri: string = \"Home\") => {\r\n  const handleResetURI = () => window.history.pushState(uri, uri, `/${uri}`);\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", handleResetURI);\r\n\r\n    return () => {\r\n      // Clean up the listener\r\n      window.removeEventListener(\"load\", handleResetURI);\r\n    };\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Attempts to extract the base URI of the application.\r\n * When used with react router, this is done before react router\r\n * start meddling with the urls.\r\n * \r\n * This function is probably not in its final form. But this will do while\r\n * I find something better instead.\r\n * \r\n * @param  {string=\"/\"} baseAppURI: Optional input if the logic to extract the uri fails.\r\n */\r\nexport const useAppURI = (baseAppURI: string = \"/\") =>{\r\n  const uri = useMemo(()=>{\r\n    const baseCurrURI = window.location.pathname.split(\"/\")[1]\r\n    const uri = (!baseCurrURI || (baseCurrURI === \"\")) ? `/${baseAppURI}` : `/${baseCurrURI}`; \r\n    return uri.replaceAll(\"//\", \"/\");\r\n  }, [1]);\r\n  return uri;\r\n}\r\n/**\r\n * When using react router with github pages and an application that lives at '<host>/baseUri/' , \r\n * refeshing the page causes github to send back a 404 Page.\r\n * This function will make sure to redirect the application the '<host>/baseUri/' after refreshing.\r\n * \r\n * onCondition is provided to avoid performing the redirection when 'condition()' evaluates to false.\r\n * This function is used until I find a better solution.\r\n * \r\n * @param  {string=\"Home\"} baseAppURI\r\n * @param  {()=>boolean} onCondition?\r\n */\r\nexport const useResetToBaseURIOnLoad = (baseAppURI?: string, onCondition?: ()=>boolean) => {\r\n  const uri = useAppURI(baseAppURI || \"/\");\r\n  \r\n  const handleResetURI = () => {\r\n    const condition = onCondition ? onCondition() : true;\r\n    condition && window.history.pushState(uri, uri, `${uri}`)\r\n  };\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", handleResetURI);\r\n\r\n    return () => {\r\n      // Clean up the listener\r\n      window.removeEventListener(\"load\", handleResetURI);\r\n    };\r\n  });\r\n}\r\n// export const useSyncURIAndDisplay = ()=>{\r\n  \r\n//   // This function assumes that the last uri corresponds to the id of the element\r\n//   // that must be scrolled into view\r\n//   let url = window.location.href.split(\"/\");\r\n//   let target = url[url.length - 1].toLowerCase();\r\n//   let element = document.getElementById(target);\r\n\r\n//   // Adjust view to display component with id from uri\r\n//   element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n// }","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from './login';\r\nimport Game from './game';\r\nimport { isOnProductionHost } from './custom-hooks/generalHelpers';\r\nimport { useResetToBaseURIOnLoad, useAppURI } from './custom-hooks/scrollHelpers';\r\nimport { useCustomCss_vh } from './custom-hooks/useCustomCss_vh';\r\nimport { Direction, TUser, SessionScore, ReduxUser } from './store/type';\r\nimport { fromLocalStorage, toLocalStorage } from './custom-utils/local-storage';\r\nimport { secsToString } from './game/utils';\r\n\r\n\r\n\r\ntype Props = {\r\n  isLoggedIn: boolean,\r\n  version: string,\r\n  onUserLogin: (user: TUser)=>void,\r\n  onChangePauseState: ()=>void,\r\n  onNextDirection: (dir: Direction | null)=>void,\r\n  onResetGame: ()=>void,\r\n  onLostGame: ()=>void,\r\n  onScorePoint: ()=>void,\r\n  onTimerTick: ()=>void,\r\n  onLogout: ()=>void,\r\n  onResultFeedback: ()=>void,\r\n  getNewUser: (name?: string)=>TUser,\r\n  user: ReduxUser,\r\n  nextSnakeDirection: Direction | null,\r\n  isPaused: boolean,\r\n  hasLost: boolean,\r\n  hasWon: boolean\r\n  level: number,\r\n  gameTimeScore: number,\r\n}\r\n\r\n/**\r\n * Returns the \"best\" inputs between \"session1\" and \"session2\"\r\n * @date 2021-01-13\r\n * @param {SessionScore} session1:SessionScore\r\n * @param {SessionScore} session2:SessionScore\r\n * @returns {SessionScore}\r\n */\r\nconst getBestSession = (session1: SessionScore, session2: SessionScore) => {\r\n  if(session1.level !== session2.level) { return session1.level > session2.level ? session1 : session2 } \r\n  if((session1.timeScore * session1.pointScore) < (session2.timeScore * session2.pointScore)) { return session2; } \r\n  return session1;\r\n}\r\n\r\n/**\r\n * Returns true if the input \"session1\" is \"greater\" that the input \"session2\"\r\n * @date 2021-01-13\r\n * @param {SessionScore} session1:SessionScore\r\n * @param {SessionScore} session2:SessionScore\r\n * @returns {boolean}\r\n */\r\nconst orderSessions = (session1: SessionScore, session2: SessionScore) => getBestSession(session1, session2) === session1;\r\n\r\n\r\n\r\nfunction App({\r\n  isLoggedIn, version, user, gameTimeScore, nextSnakeDirection, \r\n  isPaused, hasLost, hasWon, level,\r\n  onUserLogin, onLogout, onResetGame, onChangePauseState, onNextDirection, getNewUser, onResultFeedback, \r\n  onLostGame, onScorePoint, onTimerTick}: Props) {\r\n\r\n\r\n\r\n  /**\r\n   * Utility function that ensures that once the current direction from\r\n   * the user is read, the store must reset its copy to null.\r\n   * This allows the board to fallback on the current snake heading\r\n   * if the user does not react or provide a direction\r\n   * @date 2021-01-13\r\n   * @returns {Direction|null}\r\n   */\r\n  const grabNextDirection = ()=>{\r\n    nextSnakeDirection && onNextDirection(null);\r\n    return nextSnakeDirection;\r\n  }\r\n\r\n\r\n  /**\r\n   * Effect will run once and will display the current App version\r\n   */ \r\n  useEffect(()=>{\r\n    console.log(`Current App version: ${version}`);\r\n  },[version])\r\n  \r\n\r\n\r\n\r\n  /**\r\n   * CSS Effect to help with full screen on mobiles\r\n   */ \r\n  useCustomCss_vh();\r\n  /**\r\n   * Effects that redirect the app to the default home page on refresh\r\n   */ \r\n  useResetToBaseURIOnLoad(\"snake-game\", ()=>!isOnProductionHost());\r\n  const uri = useAppURI(\"snake-game\");\r\n\r\n  \r\n  /**\r\n   * Local storage effect. Commit \"users\" state/cache object to storage.\r\n   * Set \"users\" to updated storage content\r\n   */\r\n  const [users, setUsers] = useState<TUser[]>([]);\r\n  useEffect(()=>{\r\n    (users.length > 0) && toLocalStorage(\"users\", users);\r\n    const storageUsers = fromLocalStorage(\"users\", []);\r\n    (users.length !== storageUsers.length) && setUsers(storageUsers);\r\n  }, [users])\r\n  \r\n\r\n\r\n  /**\r\n   * Users DB CRUD Ops\r\n   */\r\n  const createUser = (newUsername: string) => {\r\n    const newUser = getNewUser(newUsername);\r\n    setUsers(users => [...users, newUser]);\r\n    return newUser;\r\n  }\r\n  const updateUser = (username: string, session: SessionScore) => setUsers(users => users.map(u => {\r\n    (u.name === username) && (u.last = {...session});\r\n    (u.name === username) && (u.best = getBestSession(u.best, u.last));\r\n    return u;\r\n  }));\r\n  // const deleteUser = (obsoleteUser: TUser) => setUsers(users => users.filter(u => u.name !== obsoleteUser.name));\r\n  const getUserByName = (username: string) => users.find(u => u.name.toLowerCase() === username.toLowerCase());\r\n  const getBestUser = () => users.sort((a,b) => orderSessions(a.best, b.best) ? 1 : -1)[0];\r\n\r\n\r\n\r\n  /**\r\n   * Effect that runs when game is terminated either because user won or lost. The user with its current score\r\n   * is pushed into the users application cache. The Local storage effect will be run subsequently, to commit \r\n   * to local storage\r\n   */\r\n  useEffect(()=>{\r\n    updateUser(user.name, user.current);\r\n  }, [hasLost, hasWon])\r\n\r\n\r\n  /**\r\n   * This component is rendered under \"Game\". Instead of loading the interface with Game with things that Game\r\n   * does not actually need, this component is fully built and is passed as Props to Game to be rendered.\r\n   */\r\n  const DetailsWithProps = () => <Details currentUser={getUserByName(user.name)} bestUser={getBestUser()} onLogout={onLogout}/>\r\n\r\n\r\n  return (\r\n    <Router basename={`${uri}`}>\r\n      <Switch>\r\n\r\n\r\n        {/* https://stackoverflow.com/questions/42123261/programmatically-navigate-using-react-router-v4 */}\r\n        {/* https://www.codegrepper.com/code-examples/javascript/Programmatically+navigate+using+react+router */}\r\n        <Route path={`/login`}>\r\n          {\r\n            isLoggedIn ? <Redirect to={`/play`} /> : <Login onLogin={onUserLogin} getUserByName={getUserByName} addUser={createUser}/>\r\n          }\r\n        </Route>\r\n\r\n          \r\n        <Route path={`/play`} render={({history})=>(\r\n          isLoggedIn ? <Game user={user} \r\n                             nextSnakeDirection={nextSnakeDirection}\r\n                             onResetGame={onResetGame}\r\n                             onChangePauseState={onChangePauseState}\r\n                             onNextDirection={onNextDirection}\r\n                             grabNextDirection={grabNextDirection}\r\n                             notifyGameFailure={onLostGame}\r\n                             notifyScorePoint={onScorePoint}\r\n                             onTimerTick={onTimerTick}\r\n                             onResultFeedback={onResultFeedback}\r\n                             isPaused={isPaused}\r\n                             hasLost={hasLost}\r\n                             DetailsFC={DetailsWithProps}\r\n                             hasWon={hasWon}\r\n                             level={level}\r\n                             gameTimeScore={gameTimeScore}\r\n                             /*backToWelcome={()=>history.push(`/welcome`)} *//> \r\n                     : <Redirect to={`/login`} />\r\n        )}/>\r\n\r\n\r\n\r\n\r\n        {/* Redirects */}\r\n        <Route path={`/`}>\r\n          <Redirect to={`/play`} />\r\n        </Route>\r\n        <Route path={`/*`}>\r\n          <Redirect to={`/login`} />\r\n        </Route>\r\n\r\n\r\n\r\n      </Switch>\r\n    </Router>  \r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype ResultProps = {\r\n  currentUser: TUser|undefined,\r\n  bestUser: TUser|undefined,\r\n  onLogout: ()=>void\r\n}\r\n\r\n/**\r\n * React Functional Component that appears in the side Panel on mobile\r\n */\r\nfunction Details({currentUser, bestUser, onLogout}: ResultProps){\r\n  return (\r\n    <div id=\"details\" className=\" p-4 pt-8 rounded-lg h-full flex flex-col justify-between items-stretch\">\r\n\r\n      <div>\r\n        <h1 className=\"text-xl pb-2\"><span>Current: </span><strong>{currentUser ? currentUser.name: \"None\"}</strong></h1>\r\n        {currentUser && (\r\n          <ul>\r\n            <li><span>Score: </span>{currentUser?.last.pointScore} points</li>\r\n            <li><span>Time: </span>{secsToString(currentUser?.last.timeScore)} sec</li>\r\n            <li><span>Level: </span>Level {currentUser?.last.level}</li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <h1 className=\"text-xl pb-2\"><span>Best Overall: </span><strong>{bestUser ? bestUser.name: \"None\"}</strong></h1>\r\n        {bestUser && (\r\n          <ul>\r\n            <li><span>Score: </span>{bestUser?.best.pointScore} points</li>\r\n            <li><span>Time: </span>{secsToString(bestUser?.best.timeScore)} sec</li>\r\n            <li><span>Level: </span>Level {bestUser?.best.level}</li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"flex color-main justify-between flex-wrap \">\r\n        <button onClick={onLogout} className=\"btn mt-8 mx-2 w-full bg-red-600\">Logout</button>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}","import { useEffect } from \"react\";\r\n\r\n\r\n/* https://stackoverflow.com/questions/37112218/css3-100vh-not-constant-in-mobile-browser */\r\n/* https://dev.to/admitkard/mobile-issue-with-100vh-height-100-100vh-3-solutions-3nae */\r\n/* https://stackoverflow.com/a/60735432/9034699 */\r\n\r\n\r\n\r\n/**\r\n * This function will create a css custom variable --vh based on the current viewport height.\r\n * \r\n * --vh will take into consideration the app bar on top. \r\n * \r\n * So The example below will give an element full height with no scrolls.\r\n * \r\n * @example\r\n *  calc(100 * var(--vh))\r\n\r\n * @param  {None} None\r\n */\r\nexport const useCustomCss_vh = (target?: HTMLElement) =>{\r\n\r\n  const htmlTarget = target ? target : document.querySelector(':root') as HTMLElement\r\n  \r\n  const adjuster = (target: HTMLElement)=> { \r\n    target?.style.setProperty('--vh', window.innerHeight/100 + 'px');\r\n  }\r\n\r\n  adjuster(htmlTarget);\r\n  useEffect(() => {\r\n    // window.addEventListener(\"scroll\", throttle(callback, 100));\r\n    window.addEventListener(\"resize\", ()=> adjuster(htmlTarget));\r\n\r\n    return () => {\r\n      // window.removeEventListener(\"scroll\", throttle(callback, 100));\r\n      window.removeEventListener(\"resize\", ()=> adjuster(htmlTarget));\r\n    };\r\n  });\r\n\r\n\r\n}\r\n\r\n\r\n","\r\nexport const fromLocalStorage = (key: string, defaultValue: any) => {\r\n\r\n  const localString = localStorage.getItem(key);\r\n\r\n  if(!localString) return defaultValue;\r\n\r\n  if(typeof(defaultValue) === \"string\") return localString;\r\n  if(typeof(defaultValue) === \"number\") return parseFloat(localString);\r\n\r\n  let obj = defaultValue;\r\n  try{ obj = JSON.parse(localString); }\r\n  catch(err){ }\r\n  return obj;\r\n}\r\n\r\n\r\n\r\nexport const toLocalStorage = (key: string, value: any) => {\r\n  const dataStr = typeof(value) !== \"object\" ? value + \"\" : JSON.stringify(value)\r\n  localStorage.setItem(key, dataStr)\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { Dispatch } from \"react\";\r\nimport { connect, Provider } from \"react-redux\";\r\nimport { createStore, Reducer } from \"redux\";\r\nimport { Direction, ReduxUser, SessionScore, TAction, TState, TUser } from \"./type\";\r\n\r\n\r\nconst cloneUser = (userTemplate: ReduxUser, pointScoreInc?: number, timeScoreInc?: number, levelInc?: number) => ({\r\n  name: userTemplate.name,\r\n  current: { pointScore: userTemplate.current.pointScore + (pointScoreInc || 0), timeScore: userTemplate.current.timeScore + (timeScoreInc || 0), level: userTemplate.current.level + (levelInc || 0), id: userTemplate.current.id }\r\n})\r\n\r\nconst mainReducer: Reducer<TState | undefined, TAction> = (state, action)=>{\r\n  \r\n  if(!state) return state;\r\n\r\n  switch(action.type){\r\n    case \"LOGIN_USER\":\r\n      action.payload && (state.user = getNewReduxUser());\r\n      action.payload && (state.user.name = action.payload.name);\r\n      return { ...state };\r\n    case \"LOGOUT_USER\":\r\n      action.payload && (state.user = getNewReduxUser());\r\n      action.payload && (state.user.name = \"\");\r\n      return { ...state };\r\n\r\n\r\n      \r\n\r\n\r\n    case \"CHANGE_DIRECTION\":\r\n      action.payload && (state.nextSnakeDirection = action.payload);\r\n      return { ...state };\r\n\r\n    case \"PAUSE_RESUME_GAME\":\r\n      const {user: user1, ...rest1} = {...state};\r\n      const newUser1 = cloneUser(user1, 0, rest1.chronometerCurrent/1000);\r\n\r\n      rest1.isPaused && (rest1.chronometerStart = new Date().getTime());\r\n      rest1.isPaused && (rest1.chronometerCurrent = 0);\r\n      !rest1.isPaused && (rest1.chronometerStart = null);\r\n      !rest1.isPaused && (rest1.chronometerCurrent = 0);\r\n      rest1.isPaused = !rest1.isPaused;\r\n\r\n      return { user: newUser1, ...rest1 };\r\n\r\n\r\n\r\n\r\n    case \"RESET_GAME\":\r\n      const newState1 = getInitialState();\r\n      newState1.user.name = state.user.name;\r\n      newState1.user.current = {pointScore: 0, timeScore: 0, level: 0, id: new Date().getTime()};\r\n      return newState1\r\n\r\n    case \"NEXT_LEVEL\":\r\n      const newState2 = mainReducer(state, { type:\"RESET_GAME\", payload: null });\r\n      if(!newState2) return newState2;\r\n      newState2.user.name = state.user.name;\r\n      newState2.user.current = {pointScore: state.user.current.pointScore, timeScore: state.user.current.timeScore, level: state.user.current.level + 1, id: new Date().getTime()};\r\n      return {...newState2}\r\n\r\n    case \"RESTART_GAME\":\r\n      if(state.hasWon) return mainReducer(state, { type:\"NEXT_LEVEL\", payload: null });\r\n      return mainReducer(state, { type:\"RESET_GAME\", payload: null });\r\n      \r\n\r\n\r\n\r\n\r\n\r\n    case \"SCORE_POINT\":\r\n      const {user: user3, ...rest3} = {...state};\r\n      const newUser3 = cloneUser(user3, 1);\r\n      rest3.levelScore += 1;\r\n      if(rest3.levelScore >= rest3.maximumScore) return mainReducer({ user: newUser3, ...rest3 }, {type: \"WIN_GAME\", payload: null});\r\n      return { user: newUser3, ...rest3 };\r\n\r\n    case \"WIN_GAME\":\r\n      const {user: user4, ...rest4} = {...state};\r\n      const newUser4 = cloneUser(user4, 0, rest4.chronometerCurrent/1000);\r\n      rest4.hasWon = true;\r\n      rest4.chronometerCurrent = 0;\r\n      rest4.chronometerStart = null;\r\n      return { user: newUser4, ...rest4 };\r\n\r\n    case \"LOSE_GAME\":\r\n      const {user: user5, ...rest5} = {...state};\r\n      const newUser5 = cloneUser(user5, 0, rest5.chronometerCurrent/1000);\r\n      rest5.hasLost = true;\r\n      rest5.chronometerCurrent = 0;\r\n      rest5.chronometerStart = null;\r\n      return { user: newUser5, ...rest5 };\r\n\r\n    case \"UPDATE_TIME_SCORE\":\r\n      if(!state.chronometerStart) return state;\r\n      state.chronometerCurrent = state.chronometerStart ? new Date().getTime() - state.chronometerStart : 0;\r\n      return { ...state };\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: TState)=>{\r\n  return {\r\n    ...state, \r\n    ...{isLoggedIn: state.user.name !== \"\"},\r\n    ...{gameTimeScore: state.user.current.timeScore + state.chronometerCurrent/1000},\r\n    ...{getNewUser: getNewUser}\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<TAction>)=>{\r\n  return {\r\n    onUserLogin: (user: TUser) => dispatch({type: \"LOGIN_USER\", payload: user}),\r\n    onLogout: (user: TUser) => dispatch({type: \"LOGOUT_USER\", payload: user}),\r\n    onNextDirection: (dir: Direction | null) => dispatch({type: \"CHANGE_DIRECTION\", payload: dir}),\r\n    onChangePauseState: () => dispatch({type: \"PAUSE_RESUME_GAME\", payload: null}),\r\n    onResetGame: () => dispatch({type: \"RESET_GAME\", payload: null}),\r\n    onLostGame: () => dispatch({type: \"LOSE_GAME\", payload: null}),\r\n    onScorePoint: () => dispatch({type: \"SCORE_POINT\", payload: null}),\r\n    onTimerTick: () => dispatch({type: \"UPDATE_TIME_SCORE\", payload: null}),\r\n    onResultFeedback: () => dispatch({type: \"RESTART_GAME\", payload: null}),\r\n  }\r\n}\r\n\r\n\r\n\r\nconst capitalizeFirstLetter = (word: string) => word.substr(0, 1).toUpperCase() + word.substr(1).toLowerCase();\r\nconst getNewSession = (): SessionScore => ({ pointScore: 0, timeScore: 0, level: 0, id: new Date().getTime() });\r\nconst getNewReduxUser = (name?: string): ReduxUser => ({ name: capitalizeFirstLetter(name || \"\"), current: getNewSession()});\r\nconst getNewUser = (name?: string): TUser => ({ name: capitalizeFirstLetter(name || \"\"), last: getNewSession(), best: getNewSession()});\r\n\r\nconst getInitialState = (): TState => {\r\n  const state: TState =  {\r\n    version: \"1.0\",\r\n    user: getNewReduxUser(),\r\n    nextSnakeDirection: null,\r\n    isPaused: true,\r\n    hasLost: false,\r\n    hasWon: false,\r\n    maximumScore: 3,\r\n    chronometerStart: null,\r\n    chronometerCurrent: 0,\r\n    levelScore: 0,\r\n  }\r\n  return state;\r\n}\r\nconst store = createStore(mainReducer, getInitialState());\r\n\r\n\r\n\r\nexport const connectToStore = (Component: React.FC<any>) => ()=>{\r\n  const ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(Component);\r\n  return (\r\n    <Provider store = {store}>\r\n      <ConnectedComponent/>\r\n    </Provider>\r\n  )\r\n}\r\n  \r\n\r\n  \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { connectToStore } from './store';\r\n\r\n\r\nconst AppWithReduxStore = connectToStore(App)\r\n\r\nReactDOM.render(\r\n\r\n  <React.StrictMode>\r\n    <AppWithReduxStore />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}