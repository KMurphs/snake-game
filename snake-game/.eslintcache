[{"C:\\PersonalProjects\\snake-game\\snake-game\\src\\index.tsx":"1","C:\\PersonalProjects\\snake-game\\snake-game\\src\\reportWebVitals.ts":"2","C:\\PersonalProjects\\snake-game\\snake-game\\src\\App.tsx":"3","C:\\PersonalProjects\\snake-game\\snake-game\\src\\store\\index.tsx":"4","C:\\PersonalProjects\\snake-game\\snake-game\\src\\login\\index.tsx":"5","C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\index.tsx":"6","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\generalHelpers.ts":"7","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\scrollHelpers.ts":"8","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\useCustomCss_vh.ts":"9","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-misc-controls\\modal.tsx":"10","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\useClickAnimation.ts":"11","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-form-controls\\input-with-moving-label.tsx":"12","C:\\PersonalProjects\\snake-game\\snake-game\\src\\login\\logo.tsx":"13","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-misc-controls\\hamburger-menu-control.tsx":"14","C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\keypad.tsx":"15","C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\board.tsx":"16","C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\utils.ts":"17","C:\\PersonalProjects\\snake-game\\snake-game\\src\\store\\type.ts":"18","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-utils\\local-storage.ts":"19"},{"size":627,"mtime":1610195425753,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1610195260116,"results":"22","hashOfConfig":"21"},{"size":8681,"mtime":1610555752124,"results":"23","hashOfConfig":"21"},{"size":5982,"mtime":1610554112396,"results":"24","hashOfConfig":"21"},{"size":4165,"mtime":1610554191439,"results":"25","hashOfConfig":"21"},{"size":6034,"mtime":1610555310202,"results":"26","hashOfConfig":"21"},{"size":701,"mtime":1610346593561,"results":"27","hashOfConfig":"21"},{"size":4972,"mtime":1610201624949,"results":"28","hashOfConfig":"21"},{"size":1253,"mtime":1610201624953,"results":"29","hashOfConfig":"21"},{"size":1223,"mtime":1610347122384,"results":"30","hashOfConfig":"21"},{"size":877,"mtime":1610434252502,"results":"31","hashOfConfig":"21"},{"size":2078,"mtime":1610353309694,"results":"32","hashOfConfig":"21"},{"size":6196,"mtime":1610555641800,"results":"33","hashOfConfig":"21"},{"size":544,"mtime":1610399822532,"results":"34","hashOfConfig":"21"},{"size":2412,"mtime":1610434531010,"results":"35","hashOfConfig":"21"},{"size":6467,"mtime":1610550829198,"results":"36","hashOfConfig":"21"},{"size":7886,"mtime":1610549001051,"results":"37","hashOfConfig":"21"},{"size":773,"mtime":1610550407502,"results":"38","hashOfConfig":"21"},{"size":599,"mtime":1610522523333,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"16wjrny",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\PersonalProjects\\snake-game\\snake-game\\src\\index.tsx",[],["83","84"],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\reportWebVitals.ts",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\App.tsx",["85"],"import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from './login';\r\nimport Game from './game';\r\nimport { isOnProductionHost } from './custom-hooks/generalHelpers';\r\nimport { useResetToBaseURIOnLoad, useAppURI } from './custom-hooks/scrollHelpers';\r\nimport { useCustomCss_vh } from './custom-hooks/useCustomCss_vh';\r\nimport { Direction, TUser, SessionScore, ReduxUser } from './store/type';\r\nimport { fromLocalStorage, toLocalStorage } from './custom-utils/local-storage';\r\nimport { secsToString } from './game/utils';\r\n\r\n\r\n\r\ntype Props = {\r\n  isLoggedIn: boolean,\r\n  version: string,\r\n  onUserLogin: (user: TUser)=>void,\r\n  onChangePauseState: ()=>void,\r\n  onNextDirection: (dir: Direction | null)=>void,\r\n  onResetGame: ()=>void,\r\n  onLostGame: ()=>void,\r\n  onScorePoint: ()=>void,\r\n  onTimerTick: ()=>void,\r\n  onLogout: ()=>void,\r\n  onResultFeedback: ()=>void,\r\n  getNewUser: (name?: string)=>TUser,\r\n  user: ReduxUser,\r\n  nextSnakeDirection: Direction | null,\r\n  isPaused: boolean,\r\n  hasLost: boolean,\r\n  hasWon: boolean\r\n  level: number,\r\n  gameTimeScore: number,\r\n}\r\n\r\n/**\r\n * Returns the \"best\" inputs between \"session1\" and \"session2\"\r\n * @date 2021-01-13\r\n * @param {SessionScore} session1:SessionScore\r\n * @param {SessionScore} session2:SessionScore\r\n * @returns {SessionScore}\r\n */\r\nconst getBestSession = (session1: SessionScore, session2: SessionScore) => {\r\n  if(session1.level !== session2.level) { return session1.level > session2.level ? session1 : session2 } \r\n  if((session1.timeScore * session1.pointScore) < (session2.timeScore * session2.pointScore)) { return session2; } \r\n  return session1;\r\n}\r\n\r\n/**\r\n * Returns true if the input \"session1\" is \"greater\" that the input \"session2\"\r\n * @date 2021-01-13\r\n * @param {SessionScore} session1:SessionScore\r\n * @param {SessionScore} session2:SessionScore\r\n * @returns {boolean}\r\n */\r\nconst orderSessions = (session1: SessionScore, session2: SessionScore) => getBestSession(session1, session2) === session1;\r\n\r\n\r\n\r\nfunction App({\r\n  isLoggedIn, version, user, gameTimeScore, nextSnakeDirection, \r\n  isPaused, hasLost, hasWon, level,\r\n  onUserLogin, onLogout, onResetGame, onChangePauseState, onNextDirection, getNewUser, onResultFeedback, \r\n  onLostGame, onScorePoint, onTimerTick}: Props) {\r\n\r\n\r\n\r\n  /**\r\n   * Utility function that ensures that once the current direction from\r\n   * the user is read, the store must reset its copy to null.\r\n   * This allows the board to fallback on the current snake heading\r\n   * if the user does not react or provide a direction\r\n   * @date 2021-01-13\r\n   * @returns {Direction|null}\r\n   */\r\n  const grabNextDirection = ()=>{\r\n    nextSnakeDirection && onNextDirection(null);\r\n    return nextSnakeDirection;\r\n  }\r\n\r\n\r\n  /**\r\n   * Effect will run once and will display the current App version\r\n   */ \r\n  useEffect(()=>{\r\n    console.log(`Current App version: ${version}`);\r\n  },[version])\r\n  \r\n\r\n\r\n\r\n  /**\r\n   * CSS Effect to help with full screen on mobiles\r\n   */ \r\n  useCustomCss_vh();\r\n  /**\r\n   * Effects that redirect the app to the default home page on refresh\r\n   */ \r\n  useResetToBaseURIOnLoad(\"snake-game\", ()=>!isOnProductionHost());\r\n  const uri = useAppURI(\"snake-game\");\r\n\r\n  \r\n  /**\r\n   * Local storage effect. Commit \"users\" state/cache object to storage.\r\n   * Set \"users\" to updated storage content\r\n   */\r\n  const [users, setUsers] = useState<TUser[]>([]);\r\n  useEffect(()=>{\r\n    (users.length > 0) && toLocalStorage(\"users\", users);\r\n    const storageUsers = fromLocalStorage(\"users\", []);\r\n    (users.length !== storageUsers.length) && setUsers(storageUsers);\r\n  }, [users])\r\n  \r\n\r\n\r\n  /**\r\n   * Users DB CRUD Ops\r\n   */\r\n  const createUser = (newUsername: string) => {\r\n    const newUser = getNewUser(newUsername);\r\n    setUsers(users => [...users, newUser]);\r\n    return newUser;\r\n  }\r\n  const updateUser = (username: string, session: SessionScore) => setUsers(users => users.map(u => {\r\n    (u.name === username) && (u.last = {...session});\r\n    (u.name === username) && (u.best = getBestSession(u.best, u.last));\r\n    return u;\r\n  }));\r\n  // const deleteUser = (obsoleteUser: TUser) => setUsers(users => users.filter(u => u.name !== obsoleteUser.name));\r\n  const getUserByName = (username: string) => users.find(u => u.name.toLowerCase() === username.toLowerCase());\r\n  const getBestUser = () => users.sort((a,b) => orderSessions(a.best, b.best) ? 1 : -1)[0];\r\n\r\n\r\n\r\n  /**\r\n   * Effect that runs when game is terminated either because user won or lost. The user with its current score\r\n   * is pushed into the users application cache. The Local storage effect will be run subsequently, to commit \r\n   * to local storage\r\n   */\r\n  useEffect(()=>{\r\n    updateUser(user.name, user.current);\r\n  }, [hasLost, hasWon])\r\n\r\n\r\n  /**\r\n   * This component is rendered under \"Game\". Instead of loading the interface with Game with things that Game\r\n   * does not actually need, this component is fully built and is passed as Props to Game to be rendered.\r\n   */\r\n  const DetailsWithProps = () => <Details currentUser={getUserByName(user.name)} bestUser={getBestUser()} onLogout={onLogout}/>\r\n\r\n\r\n  return (\r\n    <Router basename={`${uri}`}>\r\n      <Switch>\r\n\r\n\r\n        {/* https://stackoverflow.com/questions/42123261/programmatically-navigate-using-react-router-v4 */}\r\n        {/* https://www.codegrepper.com/code-examples/javascript/Programmatically+navigate+using+react+router */}\r\n        <Route path={`/login`}>\r\n          {\r\n            isLoggedIn ? <Redirect to={`/play`} /> : <Login onLogin={onUserLogin} getUserByName={getUserByName} addUser={createUser}/>\r\n          }\r\n        </Route>\r\n\r\n          \r\n        <Route path={`/play`} render={({history})=>(\r\n          isLoggedIn ? <Game user={user} \r\n                             nextSnakeDirection={nextSnakeDirection}\r\n                             onResetGame={onResetGame}\r\n                             onChangePauseState={onChangePauseState}\r\n                             onNextDirection={onNextDirection}\r\n                             grabNextDirection={grabNextDirection}\r\n                             notifyGameFailure={onLostGame}\r\n                             notifyScorePoint={onScorePoint}\r\n                             onTimerTick={onTimerTick}\r\n                             onResultFeedback={onResultFeedback}\r\n                             isPaused={isPaused}\r\n                             hasLost={hasLost}\r\n                             DetailsFC={DetailsWithProps}\r\n                             hasWon={hasWon}\r\n                             level={level}\r\n                             gameTimeScore={gameTimeScore}\r\n                             /*backToWelcome={()=>history.push(`/welcome`)} *//> \r\n                     : <Redirect to={`/login`} />\r\n        )}/>\r\n\r\n\r\n\r\n\r\n        {/* Redirects */}\r\n        <Route path={`/`}>\r\n          <Redirect to={`/play`} />\r\n        </Route>\r\n        <Route path={`/*`}>\r\n          <Redirect to={`/login`} />\r\n        </Route>\r\n\r\n\r\n\r\n      </Switch>\r\n    </Router>  \r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype ResultProps = {\r\n  currentUser: TUser|undefined,\r\n  bestUser: TUser|undefined,\r\n  onLogout: ()=>void\r\n}\r\n\r\n/**\r\n * React Functional Component that appears in the side Panel on mobile\r\n */\r\nfunction Details({currentUser, bestUser, onLogout}: ResultProps){\r\n  return (\r\n    <div id=\"details\" className=\" p-4 pt-8 rounded-lg h-full flex flex-col justify-between items-stretch\">\r\n\r\n      <div>\r\n        <h1 className=\"text-xl pb-2\"><span>Current: </span><strong>{currentUser ? currentUser.name: \"None\"}</strong></h1>\r\n        {currentUser && (\r\n          <ul>\r\n            <li><span>Score: </span>{currentUser?.last.pointScore} points</li>\r\n            <li><span>Time: </span>{secsToString(currentUser?.last.timeScore)} sec</li>\r\n            <li><span>Level: </span>Level {currentUser?.last.level}</li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <h1 className=\"text-xl pb-2\"><span>Best Overall: </span><strong>{bestUser ? bestUser.name: \"None\"}</strong></h1>\r\n        {bestUser && (\r\n          <ul>\r\n            <li><span>Score: </span>{bestUser?.best.pointScore} points</li>\r\n            <li><span>Time: </span>{secsToString(bestUser?.best.timeScore)} sec</li>\r\n            <li><span>Level: </span>Level {bestUser?.best.level}</li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"flex color-main justify-between flex-wrap \">\r\n        <button onClick={onLogout} className=\"btn mt-8 mx-2 w-full bg-red-600\">Logout</button>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}","C:\\PersonalProjects\\snake-game\\snake-game\\src\\store\\index.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\login\\index.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\index.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\generalHelpers.ts",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\scrollHelpers.ts",["86","87"],"// https://javascriptio.com/view/4915713/react-navigation-that-will-smooth-scroll-to-section-of-the-page\r\n// https://codesandbox.io/s/falling-https-jwrj3?file=/src/App.tsx:636-686\r\n// https://stackoverflow.com/a/16171238/9034699\r\n\r\nimport { useEffect, useMemo } from \"react\";\r\n/**\r\n * When using multiple components on the same with different react router 'routes',\r\n * this hook will use (smooth) transition to get to bring the component with 'targetID' to\r\n * the top left of the page.\r\n * \r\n * \r\n * @param  {string} targetID\r\n * @param  {any} clickEvent?\r\n * @param  {string} targetURI?\r\n * @param  {boolean=false} smooth\r\n */\r\nexport const scrollIDIntoViewHelper = (targetID: string, clickEvent?: any, targetURI?: string, smooth: boolean = false)=>{\r\n  \r\n  // We are essentially hijacking the click event which does not really work with react router\r\n  clickEvent && clickEvent.preventDefault && clickEvent.preventDefault();\r\n\r\n  // Scroll element with provided id into view\r\n  const targetElmt = document.getElementById(targetID);\r\n  targetElmt && targetElmt.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n\r\n  // Update the url\r\n  targetURI && window.history.pushState(targetID, targetID, `/${targetURI ? targetURI : targetID}`);\r\n}\r\n\r\n// useEffect(scrollURLIDIntoViewHelper) use with interval?\r\n/**\r\n * When using multiple components on the same with different react router 'routes',\r\n * this hook will use (smooth) transition to get to bring the component with 'targetID' to\r\n * the top left of the page.\r\n * This hook assumes that the route is actually the id of the component to scroll to\r\n * \r\n * @param  {boolean=false} smooth\r\n */\r\nexport const scrollURLIDIntoViewHelper = (smooth: boolean = false)=>{\r\n  \r\n  // This function assumes that the last uri corresponds to the id of the element\r\n  // that must be scrolled into view\r\n  const url = window.location.href.split(\"/\");\r\n  const target = url[url.length - 1];//.toLowerCase();\r\n  const element = document.getElementById(target);\r\n\r\n  // Adjust view to display component with id from uri\r\n  element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n}\r\n\r\n/**\r\n * This function will ensure that the application is redirected to \r\n * the \"uri\" input argument on load/page refresh.\r\n * \r\n * @param  {string=\"Home\"} uri\r\n */\r\nexport const useResetURIOnLoad = (uri: string = \"Home\") => {\r\n  const handleResetURI = () => window.history.pushState(uri, uri, `/${uri}`);\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", handleResetURI);\r\n\r\n    return () => {\r\n      // Clean up the listener\r\n      window.removeEventListener(\"load\", handleResetURI);\r\n    };\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Attempts to extract the base URI of the application.\r\n * When used with react router, this is done before react router\r\n * start meddling with the urls.\r\n * \r\n * This function is probably not in its final form. But this will do while\r\n * I find something better instead.\r\n * \r\n * @param  {string=\"/\"} baseAppURI: Optional input if the logic to extract the uri fails.\r\n */\r\nexport const useAppURI = (baseAppURI: string = \"/\") =>{\r\n  const uri = useMemo(()=>{\r\n    const baseCurrURI = window.location.pathname.split(\"/\")[1]\r\n    const uri = (!baseCurrURI || (baseCurrURI === \"\")) ? `/${baseAppURI}` : `/${baseCurrURI}`; \r\n    return uri.replaceAll(\"//\", \"/\");\r\n  }, [1]);\r\n  return uri;\r\n}\r\n/**\r\n * When using react router with github pages and an application that lives at '<host>/baseUri/' , \r\n * refeshing the page causes github to send back a 404 Page.\r\n * This function will make sure to redirect the application the '<host>/baseUri/' after refreshing.\r\n * \r\n * onCondition is provided to avoid performing the redirection when 'condition()' evaluates to false.\r\n * This function is used until I find a better solution.\r\n * \r\n * @param  {string=\"Home\"} baseAppURI\r\n * @param  {()=>boolean} onCondition?\r\n */\r\nexport const useResetToBaseURIOnLoad = (baseAppURI?: string, onCondition?: ()=>boolean) => {\r\n  const uri = useAppURI(baseAppURI || \"/\");\r\n  \r\n  const handleResetURI = () => {\r\n    const condition = onCondition ? onCondition() : true;\r\n    condition && window.history.pushState(uri, uri, `${uri}`)\r\n  };\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", handleResetURI);\r\n\r\n    return () => {\r\n      // Clean up the listener\r\n      window.removeEventListener(\"load\", handleResetURI);\r\n    };\r\n  });\r\n}\r\n// export const useSyncURIAndDisplay = ()=>{\r\n  \r\n//   // This function assumes that the last uri corresponds to the id of the element\r\n//   // that must be scrolled into view\r\n//   let url = window.location.href.split(\"/\");\r\n//   let target = url[url.length - 1].toLowerCase();\r\n//   let element = document.getElementById(target);\r\n\r\n//   // Adjust view to display component with id from uri\r\n//   element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n// }","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\useCustomCss_vh.ts",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-misc-controls\\modal.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\useClickAnimation.ts",[],["88","89"],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-form-controls\\input-with-moving-label.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\login\\logo.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-misc-controls\\hamburger-menu-control.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\keypad.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\board.tsx",["90","91","92"],"import { useCallback, useEffect, useRef, useState } from \"react\"\r\nimport { Direction, ReduxUser } from \"../store/type\";\r\nimport { arePointsEqual, getInitialSnake, getNewCrumb, getNewSnake, hasDirectionChanged, markSnake, Point, Snake, useBoardDimension } from \"./utils\";\r\n\r\n\r\ntype Props = {\r\n  grabNextDirection: ()=> Direction | null,\r\n  notifyGameFailure: ()=> void,\r\n  onTimerTick: ()=> void,\r\n  notifyScorePoint: ()=> void,\r\n  isPaused: boolean,\r\n  hasLost: boolean,\r\n  hasWon: boolean,\r\n  user: ReduxUser\r\n}\r\n\r\nexport default function Board({grabNextDirection, isPaused, hasLost, hasWon, notifyGameFailure, notifyScorePoint, user, onTimerTick}: Props){\r\n\r\n  const [gridData, setGridData] = useState({cols: 1,rows: 1})\r\n  const gridSize = 20;\r\n  const {cols: grid_cols, rows: grid_rows} = gridData;\r\n  const grid = Array(grid_rows * grid_cols).fill(0).map((item, index) => ({row: Math.floor(index / grid_cols), col: index % grid_cols, index: index}))\r\n\r\n\r\n\r\n  // Get the dimensions of the board, the first time the layout is settled. Store these in gridData\r\n  const boardRef = useRef<HTMLDivElement>(null);\r\n  const getBoardDimension = useCallback((width, height) => setGridData({cols: Math.floor(width / gridSize), rows: Math.floor(height / gridSize)}), [])\r\n  useBoardDimension(boardRef.current, getBoardDimension)\r\n  \r\n\r\n\r\n\r\n  const snakeCSSClass = \"is-of-body\";\r\n  const crumbCSSClass = \"is-crumb\";\r\n  const gameControls = useRef<{snake: Snake, crumb: Point | null}>({\r\n    snake: getInitialSnake(grid_rows, grid_cols),\r\n    crumb: null\r\n  });\r\n  // This effect draws the initial snake on screen. Should only run once or twice\r\n  useEffect(()=>{\r\n    gameControls.current.snake = getInitialSnake(grid_rows, grid_cols);\r\n    markSnake(boardRef.current, gameControls.current.snake.body, snakeCSSClass, true);\r\n\r\n    // Cleanup current snake on screen\r\n    return () => markSnake(boardRef.current, gameControls.current.snake.body, snakeCSSClass, false);\r\n  }, [grid_rows, grid_cols, user.current.id])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const getManagementControls = ()=>({\r\n    getNextDirection: grabNextDirection,\r\n    getPausedState: () => isPaused,\r\n    getLostState: () => hasLost,\r\n    getWonState: () => hasWon,\r\n    notifyGameFailure: notifyGameFailure,\r\n    notifyCrumbAssimilation: notifyScorePoint,\r\n    getLevelSpeed: () => 500 - 50 * user.current.level,\r\n    onTimerTick: onTimerTick,\r\n  })\r\n  // Provide a way for the setInterval to reference the updated grabNextDirection and not \r\n  // the original value by closure\r\n  const managementControls = useRef(getManagementControls());\r\n  // Supporting effect, to update container for grabNextDirection so that the interval\r\n  // function always has the latest value\r\n  useEffect(()=>{\r\n    managementControls.current = getManagementControls()\r\n  }, [grabNextDirection, isPaused, notifyGameFailure, user.current.id])\r\n\r\n  // Tick effect, runs every so many millisecond. It is responsible for forcing\r\n  // the snake into movement. If the user hasnot provided a direction from (obtained from \"grabNextDirection\")\r\n  // the snake will move along its current heading\r\n  useEffect(()=>{\r\n    const interval = setInterval(()=>{\r\n      \r\n      // If state is paused or terminated, do nothing\r\n      if(managementControls.current.getPausedState()) return;\r\n      if(managementControls.current.getLostState()) return;\r\n      if(managementControls.current.getWonState()) return;\r\n\r\n      // Notify store to update user game time score\r\n      managementControls.current.onTimerTick();\r\n\r\n      // Make sure we have a crumb on the board\r\n      if(gameControls.current.crumb === null) {\r\n        const crumb = getNewCrumb(grid_rows, grid_cols, gameControls.current.snake.body);\r\n        gameControls.current.crumb = crumb;\r\n        const crumbNode = boardRef.current?.querySelector(`.grid-item.row-${crumb.y}.col-${crumb.x}`);\r\n        crumbNode?.classList.add(crumbCSSClass);\r\n      };\r\n      const crumb = gameControls.current.crumb;\r\n\r\n      // Get Snake direction\r\n      const nextDirection = managementControls.current.getNextDirection();\r\n      if(hasDirectionChanged(nextDirection || gameControls.current.snake.direction, gameControls.current.snake.direction)){\r\n        gameControls.current.snake.direction = nextDirection || gameControls.current.snake.direction;   \r\n      }\r\n  \r\n\r\n      // Build new body, and get tail\r\n      const [newSnake, tail] = getNewSnake(gameControls.current.snake.body, gameControls.current.snake.direction, crumb);\r\n      gameControls.current.snake.body = newSnake;\r\n      \r\n\r\n      // Draw snake head at new coordinates after movement\r\n      const headNode = boardRef.current?.querySelector(`.grid-item.row-${newSnake[0].y}.col-${newSnake[0].x}`);\r\n      const isInvalidHead = !headNode || headNode.classList.contains(snakeCSSClass) || (newSnake[0].x < 0) ||(newSnake[0].x >= grid_cols) || (newSnake[0].y < 0)|| (newSnake[0].y >= grid_rows);\r\n      // If new head is invalid, either because it sitting on top of another part of the body snake, \r\n      // or if it exists outside the borders of the board\r\n      isInvalidHead && managementControls.current.notifyGameFailure();\r\n      // Otherwise, we are good, draw it\r\n      !isInvalidHead && headNode?.classList.add(snakeCSSClass);\r\n\r\n\r\n\r\n      // // Handle the case where the snake assimilates the current crumb on screen\r\n      const assimilatedCrumb = arePointsEqual(newSnake[0], gameControls.current.crumb);\r\n      if(assimilatedCrumb){ \r\n        const crumb = gameControls.current.crumb;\r\n        gameControls.current.crumb = null;\r\n        const crumbNode = boardRef.current?.querySelector(`.grid-item.row-${crumb.y}.col-${crumb.x}`);\r\n        crumbNode?.classList.remove(crumbCSSClass);\r\n        managementControls.current.notifyCrumbAssimilation();\r\n        return;\r\n      }\r\n\r\n\r\n      // // Erase last snake element\r\n      if(tail.length === 0) return;\r\n      const tailNode = boardRef.current?.querySelector(`.grid-item.row-${tail[0].y}.col-${tail[0].x}`);\r\n      tailNode?.classList.remove(snakeCSSClass);\r\n\r\n    }, managementControls.current.getLevelSpeed());\r\n\r\n    return () => clearInterval(interval);\r\n  }, [grid_cols, grid_rows, user.current.id])\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"logo-inner-container\" ref={boardRef}>\r\n    {\r\n      grid.map((item, index) => (\r\n        <div key={index} className={`grid-item idx-${item.index} row-${item.row} col-${item.col}`}></div>\r\n      ))\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\utils.ts",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\store\\type.ts",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-utils\\local-storage.ts",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":148,"column":6,"nodeType":"99","endLine":148,"endColumn":23,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":86,"column":6,"nodeType":"99","endLine":86,"endColumn":9,"suggestions":"102"},{"ruleId":"97","severity":1,"message":"103","line":86,"column":7,"nodeType":"104","endLine":86,"endColumn":8},{"ruleId":"93","replacedBy":"105"},{"ruleId":"95","replacedBy":"106"},{"ruleId":"97","severity":1,"message":"107","line":46,"column":37,"nodeType":"108","endLine":46,"endColumn":44},{"ruleId":"97","severity":1,"message":"109","line":46,"column":59,"nodeType":"108","endLine":46,"endColumn":66},{"ruleId":"97","severity":1,"message":"110","line":72,"column":6,"nodeType":"99","endLine":72,"endColumn":71,"suggestions":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["114"],"React Hook useMemo has a missing dependency: 'baseAppURI'. Either include it or remove the dependency array.",["115"],"The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal",["112"],["113"],"The ref value 'boardRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'boardRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","The ref value 'gameControls.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'gameControls.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'getManagementControls'. Either include it or remove the dependency array.",["116"],"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [hasLost, hasWon, user]",{"range":"123","text":"124"},"Update the dependencies array to be: [baseAppURI]",{"range":"125","text":"126"},"Update the dependencies array to be: [getManagementControls, grabNextDirection, isPaused, notifyGameFailure, user.current.id]",{"range":"127","text":"128"},[4857,4874],"[hasLost, hasWon, user]",[3401,3404],"[baseAppURI]",[2796,2861],"[getManagementControls, grabNextDirection, isPaused, notifyGameFailure, user.current.id]"]