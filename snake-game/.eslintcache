[{"C:\\PersonalProjects\\snake-game\\snake-game\\src\\index.tsx":"1","C:\\PersonalProjects\\snake-game\\snake-game\\src\\reportWebVitals.ts":"2","C:\\PersonalProjects\\snake-game\\snake-game\\src\\App.tsx":"3","C:\\PersonalProjects\\snake-game\\snake-game\\src\\store\\index.tsx":"4","C:\\PersonalProjects\\snake-game\\snake-game\\src\\login\\index.tsx":"5","C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\index.tsx":"6","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\generalHelpers.ts":"7","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\scrollHelpers.ts":"8","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\useCustomCss_vh.ts":"9","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-misc-controls\\modal.tsx":"10","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\useClickAnimation.ts":"11","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-form-controls\\input-with-moving-label.tsx":"12","C:\\PersonalProjects\\snake-game\\snake-game\\src\\login\\utils.ts":"13"},{"size":627,"mtime":1610195425753,"results":"14","hashOfConfig":"15"},{"size":440,"mtime":1610195260116,"results":"16","hashOfConfig":"15"},{"size":1824,"mtime":1610202723473,"results":"17","hashOfConfig":"15"},{"size":1321,"mtime":1610277704862,"results":"18","hashOfConfig":"15"},{"size":5469,"mtime":1610308706126,"results":"19","hashOfConfig":"15"},{"size":139,"mtime":1610201977354,"results":"20","hashOfConfig":"15"},{"size":738,"mtime":1610201624940,"results":"21","hashOfConfig":"15"},{"size":4972,"mtime":1610201624949,"results":"22","hashOfConfig":"15"},{"size":1253,"mtime":1610201624953,"results":"23","hashOfConfig":"15"},{"size":1237,"mtime":1610276404230,"results":"24","hashOfConfig":"15"},{"size":725,"mtime":1610208834372,"results":"25","hashOfConfig":"15"},{"size":1999,"mtime":1610278781011,"results":"26","hashOfConfig":"15"},{"size":2122,"mtime":1610305932796,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"16wjrny",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\PersonalProjects\\snake-game\\snake-game\\src\\index.tsx",[],["60","61"],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\reportWebVitals.ts",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\App.tsx",["62","63"],"import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from './login';\r\nimport Game from './game';\r\nimport { isOnProductionHost } from './custom-hooks/generalHelpers';\r\nimport { useResetToBaseURIOnLoad, useAppURI } from './custom-hooks/scrollHelpers';\r\nimport { useCustomCss_vh } from './custom-hooks/useCustomCss_vh';\r\nimport { TState } from './store/type';\r\n\r\ntype Props = {\r\n  isLoggedIn: boolean,\r\n  version: string,\r\n  handleIncrement: ()=>void\r\n}\r\n\r\nfunction App({isLoggedIn, version}: Props) {\r\n\r\n  console.log(`Current App version: ${version}`);\r\n\r\n\r\n  useCustomCss_vh();\r\n  useResetToBaseURIOnLoad(\"snake-game\", ()=>!isOnProductionHost());\r\n  const uri = useAppURI(\"snake-game\");\r\n\r\n  return (\r\n    <Router basename={`${uri}`}>\r\n\r\n\r\n\r\n      <Switch>\r\n\r\n\r\n        {/* https://stackoverflow.com/questions/42123261/programmatically-navigate-using-react-router-v4 */}\r\n        {/* https://www.codegrepper.com/code-examples/javascript/Programmatically+navigate+using+react+router */}\r\n        <Route path={`/login`} render={({})=>(\r\n          <Login /*onStartExploring={()=>history.push(`/data`)}*/ />\r\n        )}/>\r\n\r\n          \r\n        <Route path={`/play`} render={({history})=>(\r\n          isLoggedIn ? <Game /*backToWelcome={()=>history.push(`/welcome`)} *//> : <Redirect to={`/login`} />\r\n        )}/>\r\n\r\n\r\n\r\n\r\n        {/* Redirects */}\r\n        <Route path={`/`}>\r\n          <Redirect to={`/play`} />\r\n        </Route>\r\n        <Route path={`/*`}>\r\n          <Redirect to={`/login`} />\r\n        </Route>\r\n\r\n\r\n\r\n      </Switch>\r\n    </Router>  \r\n\r\n    // <div className=\"App\">\r\n    //   {counter}\r\n    //   <button onClick={handleIncrement}>Click me</button>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\PersonalProjects\\snake-game\\snake-game\\src\\store\\index.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\login\\index.tsx",["64","65","66","67","68","69"],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\game\\index.tsx",["70"],"\r\n\r\ntype Props = {\r\n\r\n}\r\nexport default function Game({}:Props){\r\n\r\n  return (\r\n    <section id=\"game\">\r\n      Game\r\n    </section>\r\n  )\r\n}","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\generalHelpers.ts",["71"],"import { assert } from \"console\";\r\n\r\nexport const isOnProductionHost = () => /(localhost|127.0.0.1|127.0.0.0|0.0.0.0)/.exec(window.location.origin) === null;\r\n\r\n\r\nexport const addThousandSeparator = (inp: string, separator: string = \" \", pos?: number): string => { \r\n  \r\n  // Ensure we only deal with integers as strings\r\n  if(`${parseInt(inp.replaceAll(\" \",\"\"))}` !== inp) return inp;\r\n\r\n  // When pos is not defined, the recursion is about to start\r\n  // set position to the far right of the string\r\n  pos = pos || inp.length; \r\n  if(pos - 3 <= 0) return inp;\r\n  \r\n  // Add the separator, and recurse\r\n  inp = `${inp.substr(0, pos - 3)}${separator}${inp.substr(pos - 3)}`;\r\n  return addThousandSeparator(inp, separator, pos - 3);\r\n}\r\n\r\n","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\scrollHelpers.ts",["72","73"],"// https://javascriptio.com/view/4915713/react-navigation-that-will-smooth-scroll-to-section-of-the-page\r\n// https://codesandbox.io/s/falling-https-jwrj3?file=/src/App.tsx:636-686\r\n// https://stackoverflow.com/a/16171238/9034699\r\n\r\nimport { useEffect, useMemo } from \"react\";\r\n/**\r\n * When using multiple components on the same with different react router 'routes',\r\n * this hook will use (smooth) transition to get to bring the component with 'targetID' to\r\n * the top left of the page.\r\n * \r\n * \r\n * @param  {string} targetID\r\n * @param  {any} clickEvent?\r\n * @param  {string} targetURI?\r\n * @param  {boolean=false} smooth\r\n */\r\nexport const scrollIDIntoViewHelper = (targetID: string, clickEvent?: any, targetURI?: string, smooth: boolean = false)=>{\r\n  \r\n  // We are essentially hijacking the click event which does not really work with react router\r\n  clickEvent && clickEvent.preventDefault && clickEvent.preventDefault();\r\n\r\n  // Scroll element with provided id into view\r\n  const targetElmt = document.getElementById(targetID);\r\n  targetElmt && targetElmt.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n\r\n  // Update the url\r\n  targetURI && window.history.pushState(targetID, targetID, `/${targetURI ? targetURI : targetID}`);\r\n}\r\n\r\n// useEffect(scrollURLIDIntoViewHelper) use with interval?\r\n/**\r\n * When using multiple components on the same with different react router 'routes',\r\n * this hook will use (smooth) transition to get to bring the component with 'targetID' to\r\n * the top left of the page.\r\n * This hook assumes that the route is actually the id of the component to scroll to\r\n * \r\n * @param  {boolean=false} smooth\r\n */\r\nexport const scrollURLIDIntoViewHelper = (smooth: boolean = false)=>{\r\n  \r\n  // This function assumes that the last uri corresponds to the id of the element\r\n  // that must be scrolled into view\r\n  const url = window.location.href.split(\"/\");\r\n  const target = url[url.length - 1];//.toLowerCase();\r\n  const element = document.getElementById(target);\r\n\r\n  // Adjust view to display component with id from uri\r\n  element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n}\r\n\r\n/**\r\n * This function will ensure that the application is redirected to \r\n * the \"uri\" input argument on load/page refresh.\r\n * \r\n * @param  {string=\"Home\"} uri\r\n */\r\nexport const useResetURIOnLoad = (uri: string = \"Home\") => {\r\n  const handleResetURI = () => window.history.pushState(uri, uri, `/${uri}`);\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", handleResetURI);\r\n\r\n    return () => {\r\n      // Clean up the listener\r\n      window.removeEventListener(\"load\", handleResetURI);\r\n    };\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Attempts to extract the base URI of the application.\r\n * When used with react router, this is done before react router\r\n * start meddling with the urls.\r\n * \r\n * This function is probably not in its final form. But this will do while\r\n * I find something better instead.\r\n * \r\n * @param  {string=\"/\"} baseAppURI: Optional input if the logic to extract the uri fails.\r\n */\r\nexport const useAppURI = (baseAppURI: string = \"/\") =>{\r\n  const uri = useMemo(()=>{\r\n    const baseCurrURI = window.location.pathname.split(\"/\")[1]\r\n    const uri = (!baseCurrURI || (baseCurrURI === \"\")) ? `/${baseAppURI}` : `/${baseCurrURI}`; \r\n    return uri.replaceAll(\"//\", \"/\");\r\n  }, [1]);\r\n  return uri;\r\n}\r\n/**\r\n * When using react router with github pages and an application that lives at '<host>/baseUri/' , \r\n * refeshing the page causes github to send back a 404 Page.\r\n * This function will make sure to redirect the application the '<host>/baseUri/' after refreshing.\r\n * \r\n * onCondition is provided to avoid performing the redirection when 'condition()' evaluates to false.\r\n * This function is used until I find a better solution.\r\n * \r\n * @param  {string=\"Home\"} baseAppURI\r\n * @param  {()=>boolean} onCondition?\r\n */\r\nexport const useResetToBaseURIOnLoad = (baseAppURI?: string, onCondition?: ()=>boolean) => {\r\n  const uri = useAppURI(baseAppURI || \"/\");\r\n  \r\n  const handleResetURI = () => {\r\n    const condition = onCondition ? onCondition() : true;\r\n    condition && window.history.pushState(uri, uri, `${uri}`)\r\n  };\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", handleResetURI);\r\n\r\n    return () => {\r\n      // Clean up the listener\r\n      window.removeEventListener(\"load\", handleResetURI);\r\n    };\r\n  });\r\n}\r\n// export const useSyncURIAndDisplay = ()=>{\r\n  \r\n//   // This function assumes that the last uri corresponds to the id of the element\r\n//   // that must be scrolled into view\r\n//   let url = window.location.href.split(\"/\");\r\n//   let target = url[url.length - 1].toLowerCase();\r\n//   let element = document.getElementById(target);\r\n\r\n//   // Adjust view to display component with id from uri\r\n//   element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n// }","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\useCustomCss_vh.ts",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-misc-controls\\modal.tsx",["74"],"import React, { useState } from \"react\";\r\nimport useClickAnimation from \"../custom-hooks/useClickAnimation\";\r\nimport \"./modal.css\";\r\n\r\ntype Props = {\r\n  children: React.ReactNode | React.ReactNode[],\r\n  show: boolean,\r\n  onClose: ()=>void,\r\n  containerExtraClasses?: string \r\n}\r\n\r\n\r\n\r\n// https://codemyui.com/tag/microinteractions/page/2/\r\nexport default function Modal({children, show, onClose, containerExtraClasses}: Props) {\r\n\r\n  const onAnimatedClick = useClickAnimation(\"animating\", 300, onClose)\r\n\r\n\r\n  return (\r\n    <div className={`modal__outer-container fixed left-0 right-0 top-0 bottom-0 bg-gray-800 flex items-center justify-center overflow-hidden container-frozen ${show ? \"modal--zoom-in--visible\" : \"modal--zoom-in--invisible\"}`}>\r\n      <div className={`modal__inner-container w-min max-w-11/12 bg-gray-600 p-2 rounded-sm relative ${containerExtraClasses}`}>\r\n        <>\r\n          <button onClick={onAnimatedClick} className={`modal__close-btn bg-inherit inline-flex justify-center items-center w-8 h-8 rounded-full absolute -top-3 -right-3 focus:outline-none`}>\r\n            <i className=\"fas fa-times\" aria-hidden=\"true\"></i>\r\n          </button>\r\n          {children}\r\n        </>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-hooks\\useClickAnimation.ts",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\custom-form-controls\\input-with-moving-label.tsx",[],"C:\\PersonalProjects\\snake-game\\snake-game\\src\\login\\utils.ts",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":14,"column":10,"nodeType":"81","messageId":"82","endLine":14,"endColumn":16},{"ruleId":"83","severity":1,"message":"84","line":41,"column":41,"nodeType":"85","messageId":"86","endLine":41,"endColumn":43},{"ruleId":"79","severity":1,"message":"87","line":5,"column":10,"nodeType":"81","messageId":"82","endLine":5,"endColumn":26},{"ruleId":"79","severity":1,"message":"88","line":12,"column":7,"nodeType":"81","messageId":"82","endLine":12,"endColumn":23},{"ruleId":"83","severity":1,"message":"84","line":31,"column":31,"nodeType":"85","messageId":"86","endLine":31,"endColumn":39},{"ruleId":"79","severity":1,"message":"89","line":35,"column":10,"nodeType":"81","messageId":"82","endLine":35,"endColumn":15},{"ruleId":"79","severity":1,"message":"90","line":36,"column":9,"nodeType":"81","messageId":"82","endLine":36,"endColumn":22},{"ruleId":"91","severity":1,"message":"92","line":59,"column":6,"nodeType":"93","endLine":59,"endColumn":8,"suggestions":"94"},{"ruleId":"83","severity":1,"message":"84","line":6,"column":30,"nodeType":"85","messageId":"86","endLine":6,"endColumn":38},{"ruleId":"79","severity":1,"message":"95","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":16},{"ruleId":"91","severity":1,"message":"96","line":86,"column":6,"nodeType":"93","endLine":86,"endColumn":9,"suggestions":"97"},{"ruleId":"91","severity":1,"message":"98","line":86,"column":7,"nodeType":"99","endLine":86,"endColumn":8},{"ruleId":"79","severity":1,"message":"100","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"@typescript-eslint/no-unused-vars","'TState' is defined but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'circularIterator' is defined but never used.","'fromLocalStorage' is assigned a value but never used.","'dummy' is assigned a value but never used.","'triggerRender' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useLayoutEffect has missing dependencies: 'grid_cols' and 'grid_rows'. Either include them or remove the dependency array.","ArrayExpression",["103"],"'assert' is defined but never used.","React Hook useMemo has a missing dependency: 'baseAppURI'. Either include it or remove the dependency array.",["104"],"The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [grid_cols, grid_rows]",{"range":"109","text":"110"},"Update the dependencies array to be: [baseAppURI]",{"range":"111","text":"112"},[1763,1765],"[grid_cols, grid_rows]",[3401,3404],"[baseAppURI]"]